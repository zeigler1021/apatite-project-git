---
title: "Apatite Data_Loading and Setup"
author: "Spencer  Zeigler"
date: "6/16/2021"
output:
  html_document: 
    df_print: paged
    css: stylesheet.css
    number_sections: yes
    toc: yes
    toc_float: true
    toc_depth: 3
    code_folding: show
editor_options:
  chunk_output_type: console
---

#Setup
```{r setup, include=FALSE}

#for stats
library(MASS) 
library(performance) #check model
library(tidymodels)

#tidyverse
library(tidyverse) #purr, dplyr, tidyr, readr, readxl, tibble, stringr, forcats, ggplot2
library(broom)
library(scales) 
library(readxl) 
library(glue)

#for viz
library(plotly)
library(patchwork)
library(RColorBrewer)
library(colorspace)
library(jcolors)
library(viridis)
library(ggsci)
library(ggthemes)

#for knitting
library(knitr)
library(tinytex)
library(latex2exp) 

#library(xlsx) 
#library(datapaste)

par(mfrow=c(1, 1)) #how to arrange plots, 1 per row, 1 per column

#Theme options
theme_set(theme_light())
theme_update(plot.title = element_text(hjust = 0.5)) #adjusts theme so that all titles are centered
theme_update(plot.subtitle= element_text(hjust = 0.5)) #adjusts subtitle so they are all centered
#options(scipen = -1) #prints numbers instead of scientific notation
```

# Color palettes 
```{r}
qual_color_random <- c("#322288", "#aa4499", "#44aa99", "#671000", "#989934", "#6599cc", "#aa4466", "#ddcc77", "#000000")
cb <- c("#595959", "#5f9ed1", "#c85200")
cb2 <- c("#f06400", "#949494", "#008CF0")
```


#Import Data

Import master datasheet
```{r}
apatite <- read_excel("./Data Comps_v7.xlsx", sheet="Data Comps") 
as_tibble(apatite)

apatite <- apatite %>%
  filter(!is.na(apatite$empty)) #this gets rid of data points that are missing information
```

#Create volume (mm) and (Rs)
```{r}
# apatite <- apatite %>%
#   mutate(s.v.mm = s.v/1000) %>%
#   mutate(db.v.mm = db.v/1000)

# apatite <- apatite %>%
#   mutate(s.v.rs = ((3*s.v)/(4*pi))^(1/3)) %>%
#   mutate(db.v.rs = ((3*db.v)/(4*pi))^(1/3))

```

Setting cols as factor for plotting
```{r}
apatite$size.bin <- factor(apatite$size.bin, levels = c("40-50", "51-60", "61-70", "71-80", "81-90", "91-100", "101-110", "111-120", "121-130", "131-140", "141-150", "151-160", "161-170"))

apatite$s.gem <- factor(apatite$s.gem, levels = c("A1", "A2", "A3", "B1", "B2", "B3", "C1", "C2", "C3"))

apatite$ri <- factor(apatite$ri, levels = c("1", "2", "3"))

apatite$size.name <- factor(apatite$size.name, levels=c("Small & Rare","Small & Common","Typical & Common", "Large & Common", "Large & Rare"))

#apatite$size.cat <- factor(apatite$size.cat, levels = c("AB", "C"))

apatite$gem.cat <- factor(apatite$gem.cat, levels = c("Best.GEM", "Average.GEM", "Worst.GEM"))

apatite$np <- factor(apatite$np, levels= c("0", "1", "2"))
```

Import Linear Regression Data
```{r}
#quad <- read_excel("./Linear Reg Results.xlsx", sheet="comp")
```

Making dataframe of 'common only' apatite
```{r}
#Grains Removed
common_apatite <- apatite %>%
  filter(!size.name == "Large & Rare", !size.name == "Small & Rare")
```

Making parameter based dataframes
```{r}
#Dataframe by Roughness Index 
ri1 <- common_apatite %>% filter(ri=="1")
ri2 <- common_apatite %>% filter(ri=="2")
ri3 <- common_apatite %>% filter(ri=="3")

#Dataframe by Geometric Classification
b <- common_apatite %>% filter(gc=="A") 
a <- common_apatite %>% filter(gc=="B") 
c <- common_apatite %>% filter(gc=="C") 
ab <- common_apatite %>% filter(gc == "A" | gc == "B") %>% mutate(s.gem= "AB")

#Create Dataframes split by both geometry and roughness 
a1 <- common_apatite %>% filter(s.gem == "A1") 
a2 <- common_apatite %>% filter(s.gem == "A2")
a3 <- common_apatite %>% filter(s.gem == "A3")
b1 <- common_apatite %>% filter(s.gem == "B1") 
b2 <- common_apatite %>% filter(s.gem == "B2")
b3 <- common_apatite %>% filter(s.gem == "B3")
c1 <- common_apatite %>% filter(s.gem == "C1") 
c2 <- common_apatite %>% filter(s.gem == "C2")
c3 <- common_apatite %>% filter(s.gem == "C3")

#Make dataframes based on terminations 
term0 <- common_apatite %>% filter(np == "0")
term1 <- common_apatite %>% filter(np == "1")
term2 <- common_apatite %>% filter(np =="2")
```


```{r}
a_all <- apatite %>%
  filter(gc == "A")
  
b_all <-apatite %>%
  filter(gc == "B")

ab_all <- apatite %>%
  filter(gem.geo == "AB")

c_all <- apatite %>%
  filter(gem.geo == "C")
```

#Load functions

Statistics functions
```{r}
source("function_error_propagation.R")
source("function_bootstrapped_slopes.R")
source("function_linreg_slope_uncertainty.R")
source("function_model_diagnostics.R")
source("function_ttest_compare.R")
```

Plotting functions
```{r}
source("function_error_lines.R")
source("function_plot_results.R")
```






