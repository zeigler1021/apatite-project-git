---
title: "Apatite Data_Plots_v5"
author: "Spencer  Zeigler"
date: "12/14/2020"
output:
  pdf_document:
    toc: yes
    toc_depth: '3'
  html_document:
    code_folding: show
    css: stylesheet.css
    df_print: paged
    number_sections: yes
    toc: yes
    toc_depth: 3
    toc_float: yes
editor_options:
  chunk_output_type: console
---

## Setup libaries, themes, global objects:
```{r setup, include=FALSE}
library(MASS)
library(latex2exp)
library(readxl)
library(ggplot2)
library(tidyverse)
library(tidyr)
library(plotly)
library(scales)
library(dplyr)
library(readr)
library(plotly)
library(RColorBrewer)
library(xlsx)
library(ggsci)
library(patchwork)
library(viridis)
library(scales)
library(performance)
library(glue)
install.packages("tinytex")
library(tinytex)
par(mfrow=c(1, 1)) #how to arrange plots, 1 per row, 1 per column

#Theme options
theme_set(theme_linedraw())
options(scipen = 999) #prints numbers instead of scientific notation

#Color Palettes 
cb1 <- c("#440154FF", "#39558CFF", "#74D055FF", "#FDE725FF") #colorblind pal
```

## Import Data
```{r}
apatite <- read_excel("./Data Comps_v7.xlsx", sheet="Data Comps") #This loads data from a .xlsx. Must name the sheet if there are multiple sheets. 
as_tibble(apatite)

apatite <- apatite %>%
  filter(!is.na(apatite$empty)) #this gets rid of data points that are missing information
```

## Setting cols as factor for plotting
```{r}
#Must set as factor to keep the order and colors matching in ggplot. 

apatite$size.bin <- factor(apatite$size.bin, levels = c("40-50", "51-60", "61-70", "71-80", "81-90", "91-100", "101-110", "111-120", "121-130", "131-140", "141-150", "151-160", "161-170"))
apatite$s.gem <- factor(apatite$s.gem, levels = c("A1", "A2", "A3", "B1", "B2", "B3", "C1", "C2", "C3"))
df7.rm$ri <- factor(df7.rm$ri, levels = c("1", "2", "3"))
apatite$size.name <- factor(apatite$size.name, levels=c("Small & Never","Small & Rarely","Average", "Large & Common", "Large & Rarely"))
apatite$gem.cat <- factor(apatite$gem.cat, levels = c("Best.GEM", "Average.GEM", "Worst.GEM"))
apatite$np <- factor(apatite$np, levels= c("0", "1", "2"))
```

## Creating Dataframes 
```{r}
#Grains Removed
common_apatite <- apatite %>%
  filter(!size.name == "Large & Rare", !size.name == "Small & Rare")

#Dataframe by Roughness Index 
ri1 <- common_apatite %>% filter(ri=="1")
ri2 <- common_apatite %>% filter(ri=="2")
ri3 <- common_apatite %>% filter(ri=="3")

#Dataframe by Geometric Classification
gca <- common_apatite %>% filter(gc=="A") 
gcb <- common_apatite %>% filter(gc=="B") 
gcc <- common_apatite %>% filter(gc=="C") 
ab <- common_apatite %>% filter(gc == "A" | gc == "B") %>% mutate(s.gem= "AB")

#Create Dataframes split by both geometry and roughness 
a1 <- common_apatite %>% filter(s.gem == "A1") 
a2 <- common_apatite %>% filter(s.gem == "A2")
a3 <- common_apatite %>% filter(s.gem == "A3")
b1 <- common_apatite %>% filter(s.gem == "B1") 
b2 <- common_apatite %>% filter(s.gem == "B2")
b3 <- common_apatite %>% filter(s.gem == "B3")
c1 <- common_apatite %>% filter(s.gem == "C1") 
c2 <- common_apatite %>% filter(s.gem == "C2")
c3 <- common_apatite %>% filter(s.gem == "C3")

#Make dataframes based on terminations 
term0 <- common_apatite %>% filter(np == "0")
term1 <- common_apatite %>% filter(np == "1")
term2 <- common_apatite %>% filter(np =="2")

#Create Dataframe organized by GEM and A&B 
df.ab <- rbind(df.gca, df.gcb)
df.ab <- df.ab %>%
  mutate(s.gem = "AB")
```

```{r}
error.lines <- function(vol = FALSE) {
if (vol == FALSE) pft <<- ggplot() + 
  geom_abline(slope=1, intercept = 0) + 
  geom_abline(slope=.95, intercept=0, size= .1, linetype= 2) + #5%
  geom_abline(slope=1.05263, intercept=0, size=.1, linetype= 2) + #5%
  geom_abline(slope=.9, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=1.1111111, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=.8, intercept=0, size=.1, linetype= 2) + #20%
  geom_abline(slope=1.25, intercept=0, size=.1, linetype= 2)  #20%

  if (vol == TRUE) pv <<- p +
  geom_abline(slope=.7, intercept=0, size=.1, linetype= 2) + #30%
  geom_abline(slope=1.42, intercept=0, size=.1, linetype= 2) + #30%
  geom_abline(slope=.6, intercept=0, size=.1, linetype= 2) + #40%
  geom_abline(slope=1.66, intercept=0, size=.1, linetype= 2)  #40%
}

scatter <- function(df, x, y, lm = FALSE) {
  if (lm == FALSE) ggplot() + 
  geom_abline(slope=1, intercept = 0) + 
  geom_abline(slope=.95, intercept=0, size= .1, linetype= 2) + #5%
  geom_abline(slope=1.05263, intercept=0, size=.1, linetype= 2) + #5%
  geom_abline(slope=.9, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=1.1111111, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=.8, intercept=0, size=.1, linetype= 2) + #20%
  geom_abline(slope=1.25, intercept=0, size=.1, linetype= 2) +  #20%
  
  geom_point(df, mapping = aes(x,y))
}
```





########## Ft Plots

#Ft- All Grains- OG- Scatterplot
```{r}
pft +
  labs(title = "Manual 2D vs. Nano-CT 3D Ft", subtitle="Calculated Using Ketcham et al., 2011", x= "2D Ft", y= "3D Ft") + 
  scale_color_brewer(palette="Dark2", 
                     name= "Geometric Index",
                    labels= c("A", "B", "C")) +
  geom_point(apatite, mapping=aes(x = s.ft.og, y = db.ft, color = gc), size = 2)
```

Ft- All Grains- OG vs Max - Scatterplot
```{r}
ggplot() + 
  xlim(.25, .9) + ylim(.25, .9) +
  geom_abline(slope=1, intercept = 0) + 
  geom_abline(slope=.95, intercept=0, size= .1, linetype= 2) + #5%
  geom_abline(slope=1.05263, intercept=0, size=.1, linetype= 2) + #5%
  geom_abline(slope=.9, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=1.1111111, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=.8, intercept=0, size=.1, linetype= 2) + #20%
  geom_abline(slope=1.25, intercept=0, size=.1, linetype= 2) + #20%
  labs(title = "Manual 2D vs. Nano-CT 3D Ft", subtitle="Both Geo, Both Widths (OG) vs Max Widths", x= "2D Ft", y= "3D Ft") + 
  #scale_color_manual(palette=c("grey15", "cornflowerblue"), name= "Legend", labels= c("Both Widths, Both Geo", "Max Widths, Both Geo")) +
  geom_point(df7, mapping=aes(x = s.ft.og, y = db.ft), color= "grey15", size = 2) +
  geom_point(df7, mapping=aes(x=s.ft, y=db.ft), color= "cornflowerblue", size=2)
```

Ft- All Grains- Max- Scatterplot + Regression
```{r}
ggplot() + 
  #xlim(.25, .9) + ylim(.25, .9) +
  geom_abline(slope=1, intercept = 0) + 
  geom_abline(slope=.95, intercept=0, size= .1, linetype= 2) + #5%
  geom_abline(slope=1.05263, intercept=0, size=.1, linetype= 2) + #5%
  geom_abline(slope=.9, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=1.1111111, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=.8, intercept=0, size=.1, linetype= 2) + #20%
  geom_abline(slope=1.25, intercept=0, size=.1, linetype= 2) + #20%
  labs(title = "Manual 2D vs. Nano-CT 3D Ft", subtitle="All Grains, With Regression Lines (lm)", x= "2D Ft", y= "3D Ft") + 
  scale_color_brewer(palette= "Set1", 
                     name= "Geometric Index",
                    labels= c("A", "B", "C")) +
  geom_smooth(mapping=aes(x = s.ft, y = db.ft, color=gc), data=df7, method="lm", se=FALSE) +
  geom_point(df7, mapping=aes(x = s.ft, y = db.ft, color=gc), size = 2) 
```

#Ft- Common Only- Max- Scatterplot + Regression
```{r}
ggplot() + 
  #xlim(.25, .9) + ylim(.25, .9) +
  geom_abline(slope=1, intercept = 0) + 
  geom_abline(slope=.95, intercept=0, size= .1, linetype= 2) + #5%
  geom_abline(slope=1.05263, intercept=0, size=.1, linetype= 2) + #5%
  geom_abline(slope=.9, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=1.1111111, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=.8, intercept=0, size=.1, linetype= 2) + #20%
  geom_abline(slope=1.25, intercept=0, size=.1, linetype= 2) + #20%
  labs(title = "Manual 2D vs. Nano-CT 3D Ft", subtitle="Common Grains Only, With Regression Lines (lm)", x= "2D Ft", y= "3D Ft") + 
  scale_color_viridis(discrete = TRUE, 
                     name= "Geometric Index",
                    labels= c("A", "B", "C")) +
  #geom_smooth(mapping=aes(x=s.ft, y=db.ft, color=gc), data= df7.rm, method="lm", se=FALSE) +
  geom_point(df7, mapping=aes(s.ft, db.ft), color= "grey70", size=2) +
  geom_point(df7.rm, mapping=aes(x = s.ft, y = db.ft, color=gc), size = 2)

```

#Ft- Common + Small Grains- Max- Scatterplot + Regression
```{r}
ggplot() + 
  #xlim(.25, .9) + ylim(.25, .9) +
  geom_abline(slope=1, intercept = 0) + 
  geom_abline(slope=.95, intercept=0, size= .1, linetype= 2) + #5%
  geom_abline(slope=1.05263, intercept=0, size=.1, linetype= 2) + #5%
  geom_abline(slope=.9, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=1.1111111, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=.8, intercept=0, size=.1, linetype= 2) + #20%
  geom_abline(slope=1.25, intercept=0, size=.1, linetype= 2) + #20%
  labs(title = "Manual 2D vs. Nano-CT 3D Ft", subtitle="Common + Small Grains, With Regression Lines (lm)", x= "2D Ft", y= "3D Ft") + 
  scale_color_brewer(palette= "Dark2", 
                     name= "Geometric Index",
                    labels= c("A", "B", "C")) +
                  
  geom_point(df7.small, mapping=aes(x = s.ft, y = db.ft, color=gc), size = 2) +
  geom_smooth(mapping=aes(x = s.ft, y = db.ft, color=gc), data= df7.small, method="lm", se=FALSE) 

#ggplotly(ftp4, tooltip=c("key"))
```

#Ft- Common + Large Grains- Max- Scatterplot
```{r}
ggplot() + 
  #xlim(.25, .9) + ylim(.25, .9) +
  geom_abline(slope=1, intercept = 0) + 
  geom_abline(slope=.95, intercept=0, size= .1, linetype= 2) + #5%
  geom_abline(slope=1.05263, intercept=0, size=.1, linetype= 2) + #5%
  geom_abline(slope=.9, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=1.1111111, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=.8, intercept=0, size=.1, linetype= 2) + #20%
  geom_abline(slope=1.25, intercept=0, size=.1, linetype= 2) + #20%
  
  labs(title = "Manual 2D vs. Nano-CT 3D Ft", subtitle="Common + Large Grains, With Regression Lines (lm)", x= "2D Ft", y= "3D Ft") + 
 scale_color_brewer(palette= "Dark2", 
                     name= "Geometric Index",
                    labels= c("A", "B", "C")) +
  
  geom_point(df7.large, mapping=aes(x = s.ft, y = db.ft, color=gc), size = 2) +
  geom_smooth(mapping=aes(x = s.ft, y = db.ft, color=gc), data= df7.large, method="lm", se=FALSE) 


#ggplotly(ftp4, tooltip=c("key"))
```

#Ft- Results Plot
```{r}
ggplot() + 
  #xlim(.25, .9) + ylim(.25, .9) +
  geom_abline(slope=1, intercept = 0) + 
  geom_abline(slope=.95, intercept=0, size= .1, linetype= 2) + #5%
  geom_abline(slope=1.05263, intercept=0, size=.1, linetype= 2) + #5%
  geom_abline(slope=.9, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=1.1111111, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=.8, intercept=0, size=.1, linetype= 2) + #20%
  geom_abline(slope=1.25, intercept=0, size=.1, linetype= 2) + #20%
  labs( x= "2D Ft", y= "3D Ft") + 
  scale_color_manual(values= c("#453781FF", "#3CBC75FF", "#DCE318FF", "#20A386FF", "#238A8DFF", "#FDE725FF", "#74D055FF", "#39558CFF", "#440154FF"), 
                     name= "Geometric Index",
                    labels= c("A and B", "C")) +
  #geom_smooth(mapping=aes(x=s.ft, y=db.ft, color=s.gem), data= df.ab, method="lm", se=FALSE, size=1.5) +
  geom_abline(mapping=aes(slope =0.9749, intercept =0, color= s.gem), data=ab, size=1.2) +
  #geom_smooth(mapping=aes(x=s.ft, y=db.ft, color=gc), data= df.gcc, method="lm", se=FALSE, size=1.5) +
  geom_abline(mapping=aes(slope =0.9284, intercept =0, color= gc), data=gcc, size=1.2) +
  geom_point(apatite, mapping=aes(s.ft, db.ft), color= "grey70", size=2) +
  geom_point(ab, mapping=aes(x = s.ft, y = db.ft, color=s.gem), size = 2) +
  geom_point(gcc, mapping=aes(s.ft, db.ft, color=gc), size=2)

```

Common Grains Only plotted by Geometry and colored by roughness. Regression line based on geometry plotted in red. 
```{r}
pa <- ggplot() + 
  geom_abline(slope = 1, intercept = 0, linetype = 2) +
  geom_abline(slope = 0.9754, intercept = 0, color = "red") +
  geom_point(gca, mapping=aes(s.ft, db.ft, color=as.factor(ri)), size =2) + 
  scale_color_viridis(discrete = TRUE) +
  labs(x= "2D Ft", y= "3D Ft", title ="A", subtitle = "slope= 0.9754; std error= 0.02162") 

pb <- ggplot() + 
  geom_abline(slope = 1, intercept = 0, linetype =2) + 
  geom_abline(slope = 0.9746, intercept = 0, color = "red") +
  geom_point(gcb, mapping=aes(s.ft, db.ft, color=as.factor(ri)), size =2) + 
  scale_color_viridis(discrete = TRUE) +
  labs(x= "2D Ft", y= "3D Ft", title ="B", subtitle = "slope= 0.9746; std error= 0.02518") 

pc <- ggplot() + 
  geom_abline(slope = 1, intercept = 0, linetype = 2) + 
  geom_abline(slope = 0.9284, intercept = 0, color = "red") +
  geom_point(gcc, mapping=aes(s.ft, db.ft, color=as.factor(ri)), size =2) + 
  scale_color_viridis(discrete = TRUE) +
  labs(x= "2D Ft", y= "3D Ft", title ="C", subtitle = "slope= 0.9284; std error= 0.02453") 

pa / pb / pc
```

Common Grains Only plotted by Roughness and colored by geometry. Regression line based on roughness plotted in red. 
```{r}
p1 <- ggplot() + 
  geom_abline(slope = 1, intercept = 0, linetype = 2) +
  geom_abline(slope = 0.975, intercept = 0, color = "red") +
  geom_point(ri1, mapping=aes(s.ft, db.ft, color=gc), size =2) + 
  scale_color_viridis(discrete = TRUE) +
  labs(x= "2D Ft", y= "3D Ft", title ="1", subtitle = "slope= 0.975; std error= 0.02199") 

p2 <- ggplot() + 
  geom_abline(slope = 1, intercept = 0, linetype =2) + 
  geom_abline(slope = 0.9713, intercept = 0, color = "red") +
  geom_point(ri2, mapping=aes(s.ft, db.ft, color=gc), size =2) + 
  scale_color_viridis(discrete = TRUE) +
  labs(x= "2D Ft", y= "3D Ft", title ="2", subtitle = "slope= 0.9713; std error= 0.02226") 

p3 <- ggplot() + 
  geom_abline(slope = 1, intercept = 0, linetype = 2) + 
  geom_abline(slope = 0.9478, intercept = 0, color = "red") +
  geom_point(ri3, mapping=aes(s.ft, db.ft, color=gc), size =2) + 
  scale_color_viridis(discrete = TRUE) +
  labs(x= "2D Ft", y= "3D Ft", title ="3", subtitle = "slope= 0.9478; std error= 0.03478") 

p1 / p2 / p3
```

```{r}
plot.gem <- function(df, gem, vol = FALSE) {
  
  theme_update(plot.title = element_text(hjust = 0)) #adjusts theme so that all titles are centered
  theme_update(plot.subtitle= element_text(hjust = 0))
  
  if (vol == FALSE) {
  x <- as.numeric(unlist(df %>% select(s.ft)))
  y <- as.numeric(unlist(df %>% select(db.ft)))
  
  slope <- lm(y ~ 0 + x, data= df)$coefficient[1]
  error <- summary(lm(y ~ 0 + x, data=df))$sigma
  
  slope.r <- round(slope, 3)
  error.r <- round(error, 3)
   
  print(ggplot() + 
  xlim(.47, .8) + ylim(.47, .8) +
  geom_abline(slope = 1, intercept = 0, linetype = 2) + 
  geom_abline(slope= slope, intercept= 0, color = "purple") +
  geom_point(df, mapping=aes(x,y), size =2) + 
  labs(title = glue("{gem}"),
    subtitle = glue("slope = {slope.r}\nstd error = {error.r}"),
      x= "2D Ft", y= "3D Ft"))
  } 
  if (vol == TRUE) {
  x <- as.numeric(unlist(df %>% select(s.v)))/10^5
  y <- as.numeric(unlist(df %>% select(db.v)))/10^5
  
  slope <- lm(y ~ 0 + x, data= df)$coefficient[1]
  error <- summary(lm(y ~ 0 + x, data=df))$sigma
  
  slope.r <- round(slope, 3)
  error.r <- round(error, 3) 
  
  print(ggplot() + 
  #xlim(.47, .8) + ylim(.47, .8) +
  geom_abline(slope = 1, intercept = 0, linetype = 2) + 
  geom_abline(slope= slope, intercept= 0, color = "blue") +
  geom_point(df, mapping=aes(x,y), size =2) + 
  labs(title = glue("{gem}"),
      subtitle = glue("slope = {slope.r}\nstd error = {error.r}"),
      x= "2D Vol. (10^5)", y= "3D Vol. (10^5)"))
  }
}
```

GEM plots of common grains only with regression slope plotted! 
```{r}
pa1 <- plot.gem(a1, "A1", vol = FALSE)
pb1 <- plot.gem(b1, "B1")
pc1 <- plot.gem(c1, "C1")
pa2 <- plot.gem(a2, a2$s.ft, a2$db.ft, "A2")
pb2 <- plot.gem(b2, b2$s.ft, b2$db.ft, "B2")
pc2 <- plot.gem(c2, c2$s.ft, c2$db.ft, "C2")
pa3 <- plot.gem(a3, a3$s.ft, a3$db.ft, "A3")
pb3 <- plot.gem(b3, b3$s.ft, b3$db.ft, "B3")
pc3 <- plot.gem(c3, c3$s.ft, c3$db.ft, "C3")

ft.gem <- (pa1 + pb1 + pc1) / (pa2 + pb2 + pc2) / (pa3 + pb3 + pc3)
ft.gem
```


########## Volume Plots

GEM plots of common grains only with regression slope plotted! 
```{r}
pa1 <- plot.gem(a1, "A1", vol = T)
pb1 <- plot.gem(b1, "B1", vol = T)
pc1 <- plot.gem(c1, "C1", vol = T)
pa2 <- plot.gem(a2, "A2", vol = T)
pb2 <- plot.gem(b2, "B2", vol = T)
pc2 <- plot.gem(c2, "C2", vol = T)
pa3 <- plot.gem(a3, "A3", vol = T)
pb3 <- plot.gem(b3, "B3", vol = T)
pc3 <- plot.gem(c3, "C3", vol = T)

v.gem <- (pa1 + pb1 + pc1) / (pa2 + pb2 + pc2) / (pa3 + pb3 + pc3)
v.gem
```



#Volume- All Grains- OG- Scatterplot
```{r}
ggplot() + 
  xlim(0,750000) + ylim(0, 1000000) +
  geom_abline(slope=1, intercept = 0) + 
  geom_abline(slope=.95, intercept=0, size= .1, linetype= 2) + #5%
  geom_abline(slope=1.05263, intercept=0, size=.1, linetype= 2) + #5%
  geom_abline(slope=.9, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=1.1111111, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=.8, intercept=0, size=.1, linetype= 2) + #20%
  geom_abline(slope=1.25, intercept=0, size=.1, linetype= 2) + #20%
  geom_abline(slope=.7, intercept=0, size=.1, linetype= 2) + #30%
  geom_abline(slope=1.42, intercept=0, size=.1, linetype= 2) + #30%
  geom_abline(slope=.6, intercept=0, size=.1, linetype= 2) + #40%
  geom_abline(slope=1.66, intercept=0, size=.1, linetype= 2) + #40%
  labs(title = "Manual 2D vs. Nano-CT 3D Volume", subtitle="Calculated Using Ketcham et al. 2011 with W1 and W2", x= "2D Volume", y= "3D Volume") + 
   scale_color_d3(palette= "category10", 
                     name= "Geometric Index",
                    labels= c("A", "B", "C")) +
  #scale_shape_manual(values=c(15, 16, 17), name= "Roughness Index", labels=c("1", "2", "3")) +
  
  geom_point(df7, mapping=aes(x = s.v, y = db.v, color = gc), size = 2)
```

#Volume- All Grains- Max- Scatterplot + Regression
```{r}
ggplot() + 
  xlim(0,750000) + ylim(0,750000) +
  geom_abline(slope=1, intercept = 0) + 
  geom_abline(slope=.95, intercept=0, size= .1, linetype= 2) + #5%
  geom_abline(slope=1.05263, intercept=0, size=.1, linetype= 2) + #5%
  geom_abline(slope=.9, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=1.1111111, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=.8, intercept=0, size=.1, linetype= 2) + #20%
  geom_abline(slope=1.25, intercept=0, size=.1, linetype= 2) + #20%
  geom_abline(slope=.7, intercept=0, size=.1, linetype= 2) + #30%
  geom_abline(slope=1.42, intercept=0, size=.1, linetype= 2) + #30%
  geom_abline(slope=.6, intercept=0, size=.1, linetype= 2) + #40%
  geom_abline(slope=1.66, intercept=0, size=.1, linetype= 2) + #40%
  labs(title = "Manual 2D vs. Nano-CT 3D Volume", subtitle="All Grains, With Regression Lines (lm), Zoomed", x= "2D Volume", y= "3D Volume") + 
   scale_color_d3(palette= "category10", 
                     name= "Geometric Index",
                    labels= c("A", "B", "C")) +
  
  geom_point(df7, mapping=aes(x = s.v, y = db.v, color=gc), size = 2) +               
  geom_smooth(mapping=aes(x = s.v, y = db.v, color=gc), data=df7, method="lm", se=FALSE) 
   
```

#Volume- Common Grains Only- Max- Scatterplot + Regression
```{r}
ggplot() + 
  xlim(0,750000) + ylim(0,750000) +
  geom_abline(slope=1, intercept = 0) + 
  geom_abline(slope=.95, intercept=0, size= .1, linetype= 2) + #5%
  geom_abline(slope=1.05263, intercept=0, size=.1, linetype= 2) + #5%
  geom_abline(slope=.9, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=1.1111111, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=.8, intercept=0, size=.1, linetype= 2) + #20%
  geom_abline(slope=1.25, intercept=0, size=.1, linetype= 2) + #20%
  geom_abline(slope=.7, intercept=0, size=.1, linetype= 2) + #30%
  geom_abline(slope=1.42, intercept=0, size=.1, linetype= 2) + #30%
  geom_abline(slope=.6, intercept=0, size=.1, linetype= 2) + #40%
  geom_abline(slope=1.66, intercept=0, size=.1, linetype= 2) + #40%
  labs(title = "Manual 2D vs. Nano-CT 3D Volume", subtitle="Common Grains Only, With Regression Lines (lm), Zoomed", x= "2D Volume", y= "3D Volume") + 
 scale_color_d3(palette= "category10", 
                     name= "Geometric Index",
                    labels= c("A", "B", "C")) +
                   
  geom_point(df7, mapping=aes(x = s.v, y = db.v, color=gc), size = 2) +
  geom_smooth(mapping=aes(x = s.v, y = db.v, color=gc), data=df7, method="lm", se=FALSE) 
```

#Volume- Common + Small Grains- Max- Scatterplot + Regression
```{r}
ggplot() + 
  xlim(0,750000) + ylim(0,750000) +
  geom_abline(slope=1, intercept = 0) + 
  geom_abline(slope=.95, intercept=0, size= .1, linetype= 2) + #5%
  geom_abline(slope=1.05263, intercept=0, size=.1, linetype= 2) + #5%
  geom_abline(slope=.9, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=1.1111111, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=.8, intercept=0, size=.1, linetype= 2) + #20%
  geom_abline(slope=1.25, intercept=0, size=.1, linetype= 2) + #20%
  geom_abline(slope=.7, intercept=0, size=.1, linetype= 2) + #30%
  geom_abline(slope=1.42, intercept=0, size=.1, linetype= 2) + #30%
  geom_abline(slope=.6, intercept=0, size=.1, linetype= 2) + #40%
  geom_abline(slope=1.66, intercept=0, size=.1, linetype= 2) + #40%
  labs(title = "Manual 2D vs. Nano-CT 3D Volume", subtitle="Common + Small Grains, With Regression Lines (lm), Zoomed", x= "2D Volume", y= "3D Volume") + 
 scale_color_d3(palette= "category10", 
                    name= "Geometric Index",
                    labels= c("A", "B", "C")) +
                   
  geom_point(df7.small, mapping=aes(x = s.v, y = db.v, color=gc), size = 2) +
  geom_smooth(mapping=aes(x = s.v, y = db.v, color=gc),data= df7.small, method="lm", se=FALSE) 

```

#Volume- Common + Large Grains- Max- Scatterplot + Regression
```{r}
ggplot() + 
  xlim(0,750000) + ylim(0,750000) +
  geom_abline(slope=1, intercept = 0) + 
  geom_abline(slope=.95, intercept=0, size= .1, linetype= 2) + #5%
  geom_abline(slope=1.05263, intercept=0, size=.1, linetype= 2) + #5%
  geom_abline(slope=.9, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=1.1111111, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=.8, intercept=0, size=.1, linetype= 2) + #20%
  geom_abline(slope=1.25, intercept=0, size=.1, linetype= 2) + #20%
  geom_abline(slope=.7, intercept=0, size=.1, linetype= 2) + #30%
  geom_abline(slope=1.42, intercept=0, size=.1, linetype= 2) + #30%
  geom_abline(slope=.6, intercept=0, size=.1, linetype= 2) + #40%
  geom_abline(slope=1.66, intercept=0, size=.1, linetype= 2) + #40%
  labs(title = "Manual 2D vs. Nano-CT 3D Volume", subtitle="Common + Large Grains, With Regression Lines (lm), Zoomed", x= "2D Volume", y= "3D Volume") + 
  scale_color_d3(palette= "category10", 
                    name= "Geometric Index",
                    labels= c("A", "B", "C")) +
                  
  geom_point(df7.large, mapping=aes(x = s.v, y = db.v, color=gc), size = 2) +
  geom_smooth(mapping=aes(x = s.v, y = db.v, color=gc), data=df7.large, method="lm", se=FALSE)
```

########## Other Plots

#Heatmap of GEM
```{r}
gemnumber <- read_excel("/Users/spencerzeigler/Documents/Flowers Lab/Apatite Nano-CT Project_Feb 2019_June 2020/Step 8- Statistics/Data Comps_v7.xlsx", sheet="gemnumber")

ggplot(gemnumber, aes(gc, ri, fill=value)) +
  geom_tile() +
   scale_fill_distiller(palette = "RdPu", direction=1) + 
  labs(x= "Geometric Classification", y="Roundness Index") +
  scale_y_reverse() +
  scale_x_discrete(position="top")
```

######### Need to be fixed

#Error Bars- Ft
```{r}
quad.df.ft <- read_excel("/Users/spencerzeigler/Documents/Flowers Lab/Apatite Nano-CT Project_Feb 2019_June 2020/Step 8- Statistics/Linear Reg Results.xlsx", sheet= "ft.comp")

quad.df.ft <- quad.df.ft %>%
  select(gem, method.grains, slope, sigma.slope, intercept, sigma.intercept, gem.cat) 
quad.df.ft <- quad.df.ft[order(quad.df.ft$gem),]
quad.df.ft$gem <- factor(quad.df.ft$gem, levels = c("A1", "A2", "A3", "A", "B1", "B2", "B3", "B", "AB", "C1", "C2", "C3", "C"))
quad.df.ft$intercept <- as.numeric(as.character(quad.df.ft$intercept))

pal <- c("grey20", "darkorchid4")
#####################################################################

#Ft error bars, Slope
ggplot(quad.df.ft, aes(x=gem, y=slope, color=method.grains)) + 
   scale_color_nejm(palette="default", 
                    name = "Legend", 
                    labels= c("Intercept Not Fixed", "Intercept Fixed at 0")) +
geom_pointrange(aes(ymin=slope-sigma.slope, ymax=slope+sigma.slope, color= method.grains), alpha= .8) +
  labs(x="GEM", y="Slope")
```

#Error Bars- Volume
```{r}
quad.df.v <- read_excel("/Users/spencerzeigler/Documents/Flowers Lab/Apatite Nano-CT Project_Feb 2019_June 2020/Step 8- Statistics/Linear Reg Results.xlsx", sheet= "vol.reg.master")
quad.df.v <- quad.df.v[c(53:130),]

quad.df.v <- quad.df.v %>%
  select(gem, method.grains, slope, sigma.slope, intercept, sigma.intercept, gem.cat) 
quad.df.v <- quad.df.v[order(quad.df.v$gem),]

quad.df.v$gem <- factor(quad.df.v$gem, levels = c("A1", "A2", "A3", "A", "B1", "B2", "B3", "B", "AB", "C1", "C2", "C3", "C"))
quad.df.v <- quad.df.v %>%
  #filter(!method.grains == "common.only.lm") %>%
  #filter(!method.grains == "common.only.lm.fixed") %>%
  filter(!method.grains == "common.small.rlm") %>%
  filter(!method.grains == "common.large.rlm") %>%
  filter(!method.grains == "common.small.lm") %>%
  filter(!method.grains == "common.large.lm")

#####################################################################

#Volume error bars, Slope
ggplot(quad.df.v, mapping=aes(x=gem, y=slope, color= method.grains)) + 
geom_pointrange(aes(ymin=slope-sigma.slope, ymax=slope+sigma.slope)) +
scale_color_nejm(palette="default") +
labs(title= "1σ Error Bars on Volume Correction Lines for Each GEM", x="GEM", y="Slope")

#Volume error bars, Intercept
ggplot(quad.df.v, aes(x=gem, y=intercept, color= gem.cat)) + 
  scale_color_manual(values=pal, 
                     name="Legend", 
                     labels= c("A & B grains", "C Grains")) +
geom_pointrange(aes(ymin=intercept-sigma.intercept, ymax=intercept+sigma.intercept)) +
  labs(title= "1σ Error Bars on Volume Correction Line Intercepts for Each GEM", subtitle="Calculated with a WLS Linear Regression, Colored by Dataset Regressed", x="GEM", y="Intercept")
```


#Plot Analyzed vs. Observed Line Graph
```{r}
number.apatite <- read_excel("/Users/spencerzeigler/Documents/Flowers Lab/Apatite Nano-CT Project_Feb 2019_June 2020/Step 1 (Size Analysis)/Analyzed vs Observed Binned Apatite Data_rmf_v2_jrm_final.xlsx", sheet = "R")
as_tibble(number.apatite)
number.apatite$Bin <- factor(number.apatite$Bin, levels = c("40-50", "51-60", "61-70", "71-80", "81-90", "91-100", "101-110", "111-120", "121-130", "131-140", "141-150", "151-160", "161-170"))
df7$size.name <- factor(df7$size.name, levels=c("Small & Never", "Small & Rarely","Average", "Large & Common", "Large & Rarely"))
cbpalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")


ggplot() +
  geom_line(number.apatite, mapping = aes(x=Bin, y=Analyzed, group=1)) + 
  geom_point(number.apatite, mapping= aes(x= Bin, y=Analyzed), color= "black") +
  geom_line(number.apatite, mapping = aes(x=Bin, y= Selected, group=1, color= size.name)) +
  geom_point(number.apatite, mapping= aes(x= Bin, y=Selected, color= size.name)) +
  scale_color_manual(values= c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7"), 
                    name= "Size Categories",
                    labels= c("Small & Never","Small & Rarely","Average", "Large & Common", "Large & Rarely")) +
  labs(title= "Number of Grains Selected for Nano-CT Analysis as a \n Representative Sample of 1100 Apatite Grains Run in the TraIL", x= "Size Bin (µm)", y= "Number of Grains") + 
  theme(axis.text.x = element_text(angle = 60, vjust = 0.99, hjust=1))

```


############################################################################
Manuscript Draft Figures

```{r}
plot.results <- function(df, x, y, gem=c("geo", "rough"), param= c("ft", "esr")) { #c("ft", "esr", NULL)
  
  greens <- c("#C777D6", "#41b6c4", "#004529")
  pinks <- c("#fe9929", "#dd3497", "#49126a")

  x.var <- enquo(x)
  y.var <- enquo(y)
  
  if (gem == "geo") {
       
  p <- ggplot() + 
  geom_abline(slope=1, intercept = 0) + 
  geom_abline(slope=.95, intercept=0, size= .1, linetype= 2) + #5%
  geom_abline(slope=1.05263, intercept=0, size=.1, linetype= 2) + #5%
  geom_abline(slope=.9, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=1.1111111, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=.8, intercept=0, size=.1, linetype= 2) + #20%
  geom_abline(slope=1.25, intercept=0, size=.1, linetype= 2) + #20%
  geom_abline(slope=.7, intercept=0, size=.1, linetype= 2) + #30%
  geom_abline(slope=1.42, intercept=0, size=.1, linetype= 2) + #30%
  geom_abline(slope=.6, intercept=0, size=.1, linetype= 2) + #40%
  geom_abline(slope=1.66, intercept=0, size=.1, linetype= 2) + #40%
  labs(x = "2D", y= "3D") + 
  theme(legend.position = c(.89, .15)) +
  scale_color_manual(values = pinks,
                      name= "Geometric Index",
                      labels= c("A", "B", "C")) +
  geom_point(df, mapping=aes(x = !!x.var, y = !!y.var, color = gc), size = 2)
}
  
  if (gem == "rough") {
  p <- ggplot() + 
  geom_abline(slope=1, intercept = 0) + 
  geom_abline(slope=.95, intercept=0, size= .1, linetype= 2) + #5%
  geom_abline(slope=1.05263, intercept=0, size=.1, linetype= 2) + #5%
  geom_abline(slope=.9, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=1.1111111, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=.8, intercept=0, size=.1, linetype= 2) + #20%
  geom_abline(slope=1.25, intercept=0, size=.1, linetype= 2) + #20%
  geom_abline(slope=.7, intercept=0, size=.1, linetype= 2) + #30%
  geom_abline(slope=1.42, intercept=0, size=.1, linetype= 2) + #30%
  geom_abline(slope=.6, intercept=0, size=.1, linetype= 2) + #40%
  geom_abline(slope=1.66, intercept=0, size=.1, linetype= 2) + #40%
  labs(x = "2D", y= "3D") + 
  theme(legend.position = c(.89, .15)) +
  scale_color_manual(values = greens, 
                      name = "Roughness Index",
                      labels = c("1", "2", "3")) +
  geom_point(df, mapping=aes(x = !!x.var, y = !!y.var, color = as.factor(ri)), size = 2)
  }
  
  if(param == "ft") {
    p + xlim(.25, .9) + ylim(.25, .9) 
   } 
  if(param == "esr") {
      p
     } else {
        p + xlim(0,750000) + ylim(0, 750000)
     }
}
```

Volume- all grains- colored by geometry
```{r}
plot.results(apatite, s.v, db.v, "geo")
plot.results(apatite, s.v, db.v, "rough")

plot.results(apatite, s.sa, db.sa, "geo")
plot.results(apatite, s.sa, db.sa, "rough")

plot.results(apatite, s.ft, db.ft, "geo") 
plot.results(apatite, s.ft, db.ft, "rough") 


plot.results(apatite, s.esr.ft, db.esr.ft, "geo", "esr")
plot.results(apatite, s.esr.ft, db.esr.ft, "rough", "esr")

pvg <- ggplot() + 
  #xlim(0,750000) + ylim(0, 750000) +
  geom_abline(slope=1, intercept = 0) + 
  geom_abline(slope=.95, intercept=0, size= .1, linetype= 2) + #5%
  geom_abline(slope=1.05263, intercept=0, size=.1, linetype= 2) + #5%
  geom_abline(slope=.9, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=1.1111111, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=.8, intercept=0, size=.1, linetype= 2) + #20%
  geom_abline(slope=1.25, intercept=0, size=.1, linetype= 2) + #20%
  geom_abline(slope=.7, intercept=0, size=.1, linetype= 2) + #30%
  geom_abline(slope=1.42, intercept=0, size=.1, linetype= 2) + #30%
  geom_abline(slope=.6, intercept=0, size=.1, linetype= 2) + #40%
  geom_abline(slope=1.66, intercept=0, size=.1, linetype= 2) + #40%
  labs(x = "2D Volume (µm3)", y= "3D Volume (µm3)") + 
  theme(legend.position = c(.89, .15)) +
  scale_color_manual(values = pinks,
                      name= "Geometric Index",
                      labels= c("A", "B", "C")) +
  geom_point(df7, mapping=aes(x = s.v, y = db.v, color = gc), size = 2)
pvg
```

Volume- all grains- colored by roughness
```{r}
pvr <- ggplot() + 
  #xlim(0,750000) + ylim(0, 750000) +
  geom_abline(slope=1, intercept = 0) + 
  geom_abline(slope=.95, intercept=0, size= .1, linetype= 2) + #5%
  geom_abline(slope=1.05263, intercept=0, size=.1, linetype= 2) + #5%
  geom_abline(slope=.9, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=1.1111111, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=.8, intercept=0, size=.1, linetype= 2) + #20%
  geom_abline(slope=1.25, intercept=0, size=.1, linetype= 2) + #20%
  geom_abline(slope=.7, intercept=0, size=.1, linetype= 2) + #30%
  geom_abline(slope=1.42, intercept=0, size=.1, linetype= 2) + #30%
  geom_abline(slope=.6, intercept=0, size=.1, linetype= 2) + #40%
  geom_abline(slope=1.66, intercept=0, size=.1, linetype= 2) + #40%
  labs(x = "2D Volume (µm3)", y= "3D Volume (µm3)") + 
  theme(legend.position = c(.89, .15)) +
  scale_color_manual(values = greens, 
                      name = "Roughness Index",
                      labels = c("1", "2", "3")) +
  geom_point(df7, mapping=aes(x = s.v, y = db.v, color = as.factor(ri)), size = 2)
pvr
```

Surface Area- all grains- colored by geometry
```{r}
psg <- ggplot() + 
  #xlim(0,75000) + ylim(0, 75000) +
  geom_abline(slope=1, intercept = 0) + 
  geom_abline(slope=.95, intercept=0, size= .1, linetype= 2) + #5%
  geom_abline(slope=1.05263, intercept=0, size=.1, linetype= 2) + #5%
  geom_abline(slope=.9, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=1.1111111, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=.8, intercept=0, size=.1, linetype= 2) + #20%
  geom_abline(slope=1.25, intercept=0, size=.1, linetype= 2) + #20%
  geom_abline(slope=.7, intercept=0, size=.1, linetype= 2) + #30%
  geom_abline(slope=1.42, intercept=0, size=.1, linetype= 2) + #30%
  geom_abline(slope=.6, intercept=0, size=.1, linetype= 2) + #40%
  geom_abline(slope=1.66, intercept=0, size=.1, linetype= 2) + #40%
  labs(x = "2D Surface Area (µm2)", y= "3D Surface Area (µm2)") + 
  theme(legend.position = c(.89, .15)) +
  scale_color_manual(values = pinks,
                     name= "Geometric Index",
                    labels= c("A", "B", "C")) +
  geom_point(df7, mapping=aes(x = s.sa, y = db.sa, color = gc), size = 2)
psg
```

Surface Area- all grains- colored by roughness
```{r}
psr <- ggplot() + 
  #xlim(0,75000) + ylim(0, 75000) +
  geom_abline(slope=1, intercept = 0) + 
  geom_abline(slope=.95, intercept=0, size= .1, linetype= 2) + #5%
  geom_abline(slope=1.05263, intercept=0, size=.1, linetype= 2) + #5%
  geom_abline(slope=.9, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=1.1111111, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=.8, intercept=0, size=.1, linetype= 2) + #20%
  geom_abline(slope=1.25, intercept=0, size=.1, linetype= 2) + #20%
  geom_abline(slope=.7, intercept=0, size=.1, linetype= 2) + #30%
  geom_abline(slope=1.42, intercept=0, size=.1, linetype= 2) + #30%
  geom_abline(slope=.6, intercept=0, size=.1, linetype= 2) + #40%
  geom_abline(slope=1.66, intercept=0, size=.1, linetype= 2) + #40%
  labs(x = "2D Surface Area (µm2)", y= "3D Surface Area (µm2)") + 
  theme(legend.position = c(.89, .15)) +
  scale_color_manual(values = greens, 
                     name= "Roughness Index",
                    labels= c("1", "2", "3")) +
  geom_point(df7, mapping=aes(x = s.sa, y = db.sa, color = as.factor(ri)), size = 2)
psr
```

Ft- all grains- colored by geometry
```{r}
pftg <- ggplot() + 
  xlim(.25, .9) + ylim(.25, .9) +
  geom_abline(slope=1, intercept = 0) + 
  geom_abline(slope=.95, intercept=0, size= .1, linetype= 2) + #5%
  geom_abline(slope=1.05263, intercept=0, size=.1, linetype= 2) + #5%
  geom_abline(slope=.9, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=1.1111111, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=.8, intercept=0, size=.1, linetype= 2) + #20%
  geom_abline(slope=1.25, intercept=0, size=.1, linetype= 2) + #20%
  labs(x= "2D Ft", y= "3D Ft") + 
  theme(legend.position = c(.89, .15)) +
  scale_color_manual(values = pinks,
                     name= "Geometric Index",
                    labels= c("A", "B", "C")) +
  geom_point(df7, mapping=aes(x = s.ft, y = db.ft, color = gc, key= sample), size = 2)

pftg
#ggplotly(pftg, tooltip="key")
```

Ft- all grains- colored by roughness
```{r}
pftr <- ggplot() + 
  xlim(.25, .9) + ylim(.25, .9) +
  geom_abline(slope=1, intercept = 0) + 
  geom_abline(slope=.95, intercept=0, size= .1, linetype= 2) + #5%
  geom_abline(slope=1.05263, intercept=0, size=.1, linetype= 2) + #5%
  geom_abline(slope=.9, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=1.1111111, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=.8, intercept=0, size=.1, linetype= 2) + #20%
  geom_abline(slope=1.25, intercept=0, size=.1, linetype= 2) + #20%
  labs(x= "2D Ft", y= "3D Ft") +
  theme(legend.position = c(.89, .15)) +
  scale_color_manual(values = greens,  
                     name= "Roughness Index",
                    labels= c("1", "2", "3")) +
  geom_point(df7, mapping=aes(x = s.ft, y = db.ft, color = as.factor(ri)), size = 2)

pftr
```

ESR-Ft- all grains- colored by geometry
```{r}
peg <- ggplot() + 
  geom_abline(slope=1, intercept = 0) + 
  geom_abline(slope=.95, intercept=0, size= .1, linetype= 2) + #5%
  geom_abline(slope=1.05263, intercept=0, size=.1, linetype= 2) + #5%
  geom_abline(slope=.9, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=1.1111111, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=.8, intercept=0, size=.1, linetype= 2) + #20%
  geom_abline(slope=1.25, intercept=0, size=.1, linetype= 2) + #20%
  geom_abline(slope=.7, intercept=0, size=.1, linetype= 2) + #30%
  geom_abline(slope=1.42, intercept=0, size=.1, linetype= 2) + #30%
  #geom_abline(slope=.6, intercept=0, size=.1, linetype= 2) + #40%
 #geom_abline(slope=1.66, intercept=0, size=.1, linetype= 2) + #40%
  labs(x= "2D ESR-Ft", y= "3D ESR-Ft") +
  theme(legend.position = c(.89, .15)) +
  scale_color_manual(values = pinks,  
                     name= "Geometric Index",
                    labels= c("A", "B", "C")) +
  geom_point(df7, mapping=aes(x = s.esr.ft, y = db.esr.ft, color = gc), size = 2)
peg
```

ESR-Ft- all grains- colored by roughness
```{r}
per <- ggplot() + 
  geom_abline(slope=1, intercept = 0) + 
  geom_abline(slope=.95, intercept=0, size= .1, linetype= 2) + #5%
  geom_abline(slope=1.05263, intercept=0, size=.1, linetype= 2) + #5%
  geom_abline(slope=.9, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=1.1111111, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=.8, intercept=0, size=.1, linetype= 2) + #20%
  geom_abline(slope=1.25, intercept=0, size=.1, linetype= 2) + #20%
  geom_abline(slope=.7, intercept=0, size=.1, linetype= 2) + #30%
  geom_abline(slope=1.42, intercept=0, size=.1, linetype= 2) + #30%
  labs(x= "2D ESR-Ft", y= "3D ESR-Ft") +
  theme(legend.position = c(.89, .15)) +
  scale_color_manual(values = greens,  
                     name= "Roughness Index",
                    labels= c("1", "2", "3")) +
  geom_point(df7, mapping=aes(x = s.esr.ft, y = db.esr.ft, color = as.factor(ri)), size = 2)
per
```

Combine all results: 
```{r}
cowplot::plot_grid(pvg, pvr, psg, psr, pftg, pftr, peg, per, nrow =4, ncol = 2, labels = NULL)
#save 1100 x 1300


boxplot(df.gca$db.ft, df.gca$s.ft)
```

ESR
```{r}
ggplot() + 
  geom_point(df7, mapping=aes(s.esr.ft, db.esr.ft)) +
  geom_abline(slope=1, intercept=0)

ggplot() + 
  geom_point(df7, mapping=aes(s.rs.trad, db.rs.trad)) +
  geom_abline(slope=1, intercept=0)

ggplot() +
  geom_point(df7, mapping=aes(s.esr.ft, s.rs.trad))
ggplot() + 
  geom_point(df7, mapping=aes(db.esr.ft, db.rs.trad)) 

par(mfrow=c(1,2))

plot(df7$s.esr.ft, df7$s.rs.trad, xlab = "2D ESR Ft", ylab = "2D SA/V Rs")
plot(df7$db.esr.ft, df7$db.rs.trad, xlab = "3D ESR Ft", ylab = "3D SA/V Rs")

```

Ft 238 vs Ft 232
```{r}
ft.df <- read_excel("/Users/spencerzeigler/Documents/Flowers Lab/Apatite Nano-CT Project_Feb 2019_June 2020/Step 8- Statistics/SZ_Ft_Check_04202021.xlsx", sheet = "Ft Check_Final")
na.omit(ft.df)

#ft.df <- ft.df[-688,]
#ft.df <- ft.df[-360,]

p <- ggplot() + 
  geom_point(ft.df, mapping=aes(ft.238, mean.ft, key = sample)) + 
  geom_abline(slope=1, intercept=0) +
  geom_abline(slope=.95, intercept=0, size= .1, linetype= 2) + #5%
  geom_abline(slope=1.05263, intercept=0, size=.1, linetype= 2) + #5%
  geom_abline(slope=.9, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=1.1111111, intercept=0, size=.1, linetype= 2) + #10%
  geom_abline(slope=.8, intercept=0, size=.1, linetype= 2) + #20%
  geom_abline(slope=1.25, intercept=0, size=.1, linetype= 2) + #20%
  geom_abline(slope=.7, intercept=0, size=.1, linetype= 2) + #30%
  geom_abline(slope=1.42, intercept=0, size=.1, linetype= 2)  #30%

shapiro.test(ft.df$ft.238)
qqline(ft.df$ft.238)

DescTools::SignTest(ft.df$ft.238, ft.df$mean.ft)

wilcox.test(ft.df$ft.238, ft.df$mean.ft) #the two populations are significantly different 
wilcox.test(ft.df$ft238.meanft, mu= 1)
```

#Checking if the regression line through the 238 vs total Ft data is within uncert. of a 1:1 line...it isn't. 
```{r}
x <- ft.df
robust.ft <- lm(mean.ft ~ ft.238, data=x)

sigma.slope.ft <- function(linreg, x) {
fit.ft <- summary(linreg)
fit.ft <- data.frame(fit.ft$coefficients)
df <- data.frame(twoD = x$ft.238,
                 threeD = x$mean.ft, 
                 intercept = rep(fit.ft[1,1], len=nrow(x)), 
                 slope = rep(fit.ft[2,1], len= nrow(x)))
df <- na.omit(df)

delta <- nrow(df) * sum(df$twoD^2) - (sum(df$twoD))^2
sigma.y <- sqrt(1/(nrow(df)-2)*sum((df$threeD - df$intercept - df$twoD*df$slope)^2))
uncert.slope <- sigma.y * sqrt(nrow(df)/delta)
}

sigma.incp.ft <- function(linreg, x) {
fit.ft <- summary(linreg)
fit.ft <- data.frame(fit.ft$coefficients)
df <- data.frame(twoD = x$ft.238,
                 threeD = x$mean.ft, 
                 intercept = rep(fit.ft[1,1], len=nrow(x)), 
                 slope = rep(fit.ft[2,1], len= nrow(x)))
df <- na.omit(df)

delta <- nrow(df) * sum(df$twoD^2) - (sum(df$twoD))^2
sigma.y <- sqrt(1/(nrow(df)-2)*sum((df$threeD - df$intercept - df$twoD*df$slope)^2))
uncert.incept <- sigma.y * sqrt((sum(df$twoD^2))/delta)
}


uncert.slope.ft <- sigma.slope.ft(robust.ft, x)
uncert.incep.ft <- sigma.incp.ft(robust.ft, x)

values <- summary(robust.ft)
stats.df.ft <- rbind(slope=values$coefficients[2,1], sigma.slope = uncert.slope.ft, intercept=values$coefficients[1,1], sigma.intercept = uncert.incep.ft)
stats.df.ft<- as.data.frame(t(as.matrix(stats.df.ft)))

#Slope

        x <- 1
        y <- 1.049366
  u <-  0
  w <-  0.004361325

diff <- x - y
uncert <- sqrt(u^2 + w^2)

if (abs(diff) < abs(uncert)) {
  print("Within 1sigma")
} else {
    print("Not within 1sigma")
}


#INtercept

x <- 0
        y <- 0.049793
  u <-  0
  w <-  0.003101313

diff <- x - y
uncert <- sqrt(u^2 + w^2)

if (abs(diff) < abs(uncert)) {
  print("Within 1sigma")
} else {
    print("Not within 1sigma")
}
```



SA:V Ratios 
```{r}
df7 <- df7 %>%
  dplyr::mutate(db.sav.ratio = 3*db.v/db.sa) %>%
  dplyr::mutate(s.sav.ratio = 3*s.v/s.sa)

ggplot() + 
  #xlim(0.03, .19) + ylim(0.03, .19) +
  geom_point(df7, mapping=aes(s.sav.ratio, db.sav.ratio, color= gc)) +
  geom_abline(slope=1, intercept=0) +
  #labs(title= "SAV.Ratio = SA/V", subtitle= "2D Overestimates SA and V, but 2D Underestimates SAV.Ratio") +
  scale_color_brewer(palette = "Dark2")
```






######################################################################################################
Other/Unknown

```{r}
plot(x=j.w2, y=j.w1, data=df7)

ggplot(data=df7, mapping=aes(x=j.w2, y=j.w1)) + geom_point() + geom_abline(slope=1, intercept=0)
```


```{r}
width_data <- df7 %>%
  select(sample, j.w1, j.w2)

write_excel_csv(width_data, "/Users/spencerzeigler/Desktop/widthdata.csv")
```

```{r}
plot(db.boxa ~ j.l1, data= df7.rm)

ggplot() + 
  geom_point(df7, mapping=aes(j.l1, db.boxa))

ggplot() + 
  geom_point(df7, mapping=aes(j.w2, db.boxc)) +
  geom_abline(mapping=aes(slope=1,  intercept=0))
```

```{r}
par(mfrow=c(2,2))

mod<- lm(db.ft ~ s.ft, data=df7)
plot(mod)

mod1 <- lm(db.ft ~ s.ft, data= df7.rm)
plot(mod1)

https://www.ucd.ie/ecomodel/Resources/QQplots_WebVersion.html
```


#Base R version of GEM plot
```{r}
par(mfrow=c(3,3))

plot(df.a1$s.ft, df.a1$db.ft, xlim=c(.4, .8), ylim=c(.4, .8), xlab = "2D Ft", ylab = "3D Ft", main = 
       "A1")
abline(0,1)

plot(df.b1$s.ft, df.b1$db.ft, xlim=c(.4, .8), ylim=c(.4, .8), xlab = "2D Ft", ylab = "3D Ft", main = 
       "B1")
abline(0,1)
plot(df.c1$s.ft, df.c1$db.ft, xlim=c(.4, .8), ylim=c(.4, .8), xlab = "2D Ft", ylab = "3D Ft", main = 
       "C1")
abline(0,1)

plot(df.a2$s.ft, df.a2$db.ft, xlim=c(.4, .8), ylim=c(.4, .8), xlab = "2D Ft", ylab = "3D Ft", main = 
       "A2")
abline(0,1)
plot(df.b2$s.ft, df.b2$db.ft, xlim=c(.4, .8), ylim=c(.4, .8), xlab = "2D Ft", ylab = "3D Ft", main = 
       "B2")
abline(0,1)
plot(df.c2$s.ft, df.c2$db.ft, xlim=c(.4, .8), ylim=c(.4, .8), xlab = "2D Ft", ylab = "3D Ft", main = 
       "C2")
abline(0,1)

plot(df.a3$s.ft, df.a3$db.ft, xlim=c(.4, .8), ylim=c(.4, .8), xlab = "2D Ft", ylab = "3D Ft", main = 
       "A3")
abline(0,1)
plot(df.b3$s.ft, df.b3$db.ft, xlim=c(.4, .8), ylim=c(.4, .8), xlab = "2D Ft", ylab = "3D Ft", main = 
       "B3")
abline(0,1)
plot(df.c3$s.ft, df.c3$db.ft, xlim=c(.4, .8), ylim=c(.4, .8), xlab = "2D Ft", ylab = "3D Ft", main = 
       "C3")
abline(0,1)
```

Notes
```{r}
#brp.color <- c("lightseagreen", "firebrick3", "darkorchid3", "#E69F00", "lightseagreen", "firebrick3", "#56B4E9", "#009E73", "#0072B2", "#CC79A7", "#000000")
#bry.color <-c("#2C8C99", "#e5b400","#f44609","#EF476F","#faa612","#550527", "#688d27","#a10702", "#87B38D","#2C666E", "#4D8B31")
#accent.color <- c("#D95F02","cornflowerblue", "darkolivegreen", "darkorchid3")
#brewer.pal(n = 8, name = "Paired") #Pulls a palette from Rcolorbrewer and prints the hex codes

#To use ggsci https://cran.r-project.org/web/packages/ggsci/vignettes/ggsci.html
#scales::viridis_pal()(n=20)
```

Testing how to keep colors the same across plots for samples for morgan
```{r}
#Splits sample col by comma
#df7.sep <- separate(df7, sample, c("samplename", "round", "grain"))
#df7.sep$samplename <- factor(df7.sep$samplename, levels = c("MM", "DCA", "BF16", "16MFS05", "15MFS07", "Bail", "C50", "FCT"))
##Setting my color pallete. The order the colors are in matches the the samples. (ie. MM will be red; DCA will be blue; etc.)
#col.sample <- c("red", "blue", "yellow", "purple", "pink", "green", "orange", "black")

##Plotting my entire dataset
#ggplot(df7.sep, mapping = aes(s.ft, db.ft, color = samplename)) + 
  #scale_color_brewer(palette = "Set1", drop = TRUE,limits = levels(df7.sep$samplename)) +geom_point()

##Creating a new dataset by filtering. New dataset only contains mount 2. 
#df7.sep.mount2 <- df7.sep %>% filter(mount == 2) 

##Plotting mount 2
#p2 <- ggplot(df7.sep.mount2, mapping= aes(s.ft, db.ft, color=samplename)) + 
  #scale_color_brewer(palette = "Set1", drop=TRUE, limits = levels(df7.sep$samplename)) +geom_point()
```



