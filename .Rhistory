bootstrap.linreg(apatite)
bootstrap.linreg(gcc)
bootstrap.linreg(ab)
#read in spreadsheet of linear regression values
quad <- read_excel("./Linear Reg Results.xlsx", sheet="comp")
#function
error.propagation(quad, "bootstrapped.common", "ft", "A", "C")
plot(db.ft, s.ft)
plot(db.ft, s.ft),  data=apatite
plot(db.ft, s.ft, data=apatite)
plot(apatite$db.ft, apatite$s.ft)
summary(lm(s.ft ~ db.ft, data=apatite))
abline(a=.94459, b=0)
abline(a=.94459, b=0)
plot(apatite$db.ft, apatite$s.ft)
abline(a=.94459, b=0)
abline(.94459, 0)
abline(0, .94459)
summary(lm(db.ft ~ s.ft, data=apatite))
abline(0, .95261)
fit1 <- lm(db.ft ~ s.ft, data=apatite)
fit2 <- lm(s.ft ~ db.ft, data=apatite)
plot(apatite$s.ft, apatite$db.ft)
abline(1,0)
abline(0,1)
plot(fit1, color = "red")
abline(fit1, color = "red")
warnings()
plot(apatite$s.ft, apatite$db.ft)
abline(0,1)
abline(fit1, color = "red")
abline(fit1)
abline(fit1)
abilne(fit1)
fit1
abline(fit1)
abline(fit1, col="red")
abline(fit2, col="blue")
plot(apatite$db.ft,apatite$s.ft)
abline(0,1)
abline(fit2, col="blue")
View(slope.uncertainty.switched)
slope.uncertainty <- function(df, param) {
if (param == "ft") {
y <- df$db.ft
x <- df$s.ft
fit <- summary(lm(x ~ 0 + y, data= df))
std_err <- fit$sigma
fit <- data.frame(fit$coefficients)
df_values <- data.frame(twoD = df$s.ft,
threeD = df$db.ft,
slope = rep(fit[1,1], len= nrow(df)))
delta <- nrow(df_values) * sum(df_values$twoD^2) - (sum(df_values$twoD))^2
sigma.y <- sqrt(1/(nrow(df_values)-2)*sum((df_values$threeD - 0 - df_values$twoD*df_values$slope)^2))
uncert.slope <- sigma.y * sqrt(nrow(df_values)/delta)
results <- rbind(slope=fit[1,1], sigma.slope=uncert.slope, intercept=0, sigma.intercept=0, std.error=std_err)
results <<- as.data.frame(t(as.matrix(results)))
}
if (param == "volume") {
y <- df$db.v
x <- df$s.v
fit <- summary(lm(y ~ 0 + x, data= df))
std_err <- fit$sigma
fit <- data.frame(fit$coefficients)
df_values <- data.frame(twoD = df$s.v,
threeD = df$db.v,
slope = rep(fit[1,1], len= nrow(df)))
delta <- nrow(df_values) * sum(df_values$twoD^2) - (sum(df_values$twoD))^2
sigma.y <- sqrt(1/(nrow(df_values)-2)*sum((df_values$threeD - 0 - df_values$twoD*df_values$slope)^2))
uncert.slope <- sigma.y * sqrt(nrow(df_values)/delta)
results <- rbind(slope=fit[1,1], sigma.slope=uncert.slope, intercept=0, sigma.intercept=0, std.error=std_err)
results <<- as.data.frame(t(as.matrix(results)))
}
if (param == "esr") {
y <- df$db.esr.ft
x <- df$s.esr.ft
fit <- summary(lm(y ~ 0 + x, data= df))
std_err <- fit$sigma
fit <- data.frame(fit$coefficients)
df_values <- data.frame(twoD = df$s.esr.ft,
threeD = df$db.esr.ft,
slope = rep(fit[1,1], len= nrow(df)))
delta <- nrow(df_values) * sum(df_values$twoD^2) - (sum(df_values$twoD))^2
sigma.y <- sqrt(1/(nrow(df_values)-2)*sum((df_values$threeD - 0 - df_values$twoD*df_values$slope)^2))
uncert.slope <- sigma.y * sqrt(nrow(df_values)/delta)
results <- rbind(slope=fit[1,1], sigma.slope=uncert.slope, intercept=0, sigma.intercept=0, std.error=std_err)
results <<- as.data.frame(t(as.matrix(results)))
}
}
slope.uncertainty(apatite, "ft")
View(results)
slope.uncertainty.switched(apatite, "ft")
View(results)
View(results)
View(results)
slope.uncertainty(apatite, "ft")
View(results)
slope.uncertainty(apatite, "ft")
if (param == "ft") {
y <- df$s.ft
x <- df$db.ft
fit <- summary(lm(y ~ 0 + x, data= df))
std_err <- fit$sigma
fit <- data.frame(fit$coefficients)
df_values <- data.frame(twoD = df$s.ft,
threeD = df$db.ft,
slope = rep(fit[1,1], len= nrow(df)))
delta <- nrow(df_values) * sum(df_values$twoD^2) - (sum(df_values$twoD))^2
sigma.y <- sqrt(1/(nrow(df_values)-2)*sum((df_values$threeD - 0 - df_values$twoD*df_values$slope)^2))
uncert.slope <- sigma.y * sqrt(nrow(df_values)/delta)
results <- rbind(slope=fit[1,1], sigma.slope=uncert.slope, intercept=0, sigma.intercept=0, std.error=std_err)
results <<- as.data.frame(t(as.matrix(results)))
}
slope.uncertainty <- function(df, param) {
if (param == "ft") {
y <- df$s.ft
x <- df$db.ft
fit <- summary(lm(y ~ 0 + x, data= df))
std_err <- fit$sigma
fit <- data.frame(fit$coefficients)
df_values <- data.frame(twoD = df$s.ft,
threeD = df$db.ft,
slope = rep(fit[1,1], len= nrow(df)))
delta <- nrow(df_values) * sum(df_values$twoD^2) - (sum(df_values$twoD))^2
sigma.y <- sqrt(1/(nrow(df_values)-2)*sum((df_values$threeD - 0 - df_values$twoD*df_values$slope)^2))
uncert.slope <- sigma.y * sqrt(nrow(df_values)/delta)
results <- rbind(slope=fit[1,1], sigma.slope=uncert.slope, intercept=0, sigma.intercept=0, std.error=std_err)
results <<- as.data.frame(t(as.matrix(results)))
}
if (param == "volume") {
y <- df$db.v
x <- df$s.v
fit <- summary(lm(y ~ 0 + x, data= df))
std_err <- fit$sigma
fit <- data.frame(fit$coefficients)
df_values <- data.frame(twoD = df$s.v,
threeD = df$db.v,
slope = rep(fit[1,1], len= nrow(df)))
delta <- nrow(df_values) * sum(df_values$twoD^2) - (sum(df_values$twoD))^2
sigma.y <- sqrt(1/(nrow(df_values)-2)*sum((df_values$threeD - 0 - df_values$twoD*df_values$slope)^2))
uncert.slope <- sigma.y * sqrt(nrow(df_values)/delta)
results <- rbind(slope=fit[1,1], sigma.slope=uncert.slope, intercept=0, sigma.intercept=0, std.error=std_err)
results <<- as.data.frame(t(as.matrix(results)))
}
if (param == "esr") {
y <- df$db.esr.ft
x <- df$s.esr.ft
fit <- summary(lm(y ~ 0 + x, data= df))
std_err <- fit$sigma
fit <- data.frame(fit$coefficients)
df_values <- data.frame(twoD = df$s.esr.ft,
threeD = df$db.esr.ft,
slope = rep(fit[1,1], len= nrow(df)))
delta <- nrow(df_values) * sum(df_values$twoD^2) - (sum(df_values$twoD))^2
sigma.y <- sqrt(1/(nrow(df_values)-2)*sum((df_values$threeD - 0 - df_values$twoD*df_values$slope)^2))
uncert.slope <- sigma.y * sqrt(nrow(df_values)/delta)
results <- rbind(slope=fit[1,1], sigma.slope=uncert.slope, intercept=0, sigma.intercept=0, std.error=std_err)
results <<- as.data.frame(t(as.matrix(results)))
}
}
slope.uncertainty(apatite, "ft")
View(results)
slope.uncertainty <- function(df, param) {
if (param == "ft") {
y <- df$db.ft
x <- df$s.ft
fit <- summary(lm(y ~ 0 + x, data= df))
std_err <- fit$sigma
fit <- data.frame(fit$coefficients)
df_values <- data.frame(twoD = df$s.ft,
threeD = df$db.ft,
slope = rep(fit[1,1], len= nrow(df)))
delta <- nrow(df_values) * sum(df_values$twoD^2) - (sum(df_values$twoD))^2
sigma.y <- sqrt(1/(nrow(df_values)-2)*sum((df_values$threeD - 0 - df_values$twoD*df_values$slope)^2))
uncert.slope <- sigma.y * sqrt(nrow(df_values)/delta)
results <- rbind(slope=fit[1,1], sigma.slope=uncert.slope, intercept=0, sigma.intercept=0, std.error=std_err)
results <<- as.data.frame(t(as.matrix(results)))
}
if (param == "volume") {
y <- df$db.v
x <- df$s.v
fit <- summary(lm(y ~ 0 + x, data= df))
std_err <- fit$sigma
fit <- data.frame(fit$coefficients)
df_values <- data.frame(twoD = df$s.v,
threeD = df$db.v,
slope = rep(fit[1,1], len= nrow(df)))
delta <- nrow(df_values) * sum(df_values$twoD^2) - (sum(df_values$twoD))^2
sigma.y <- sqrt(1/(nrow(df_values)-2)*sum((df_values$threeD - 0 - df_values$twoD*df_values$slope)^2))
uncert.slope <- sigma.y * sqrt(nrow(df_values)/delta)
results <- rbind(slope=fit[1,1], sigma.slope=uncert.slope, intercept=0, sigma.intercept=0, std.error=std_err)
results <<- as.data.frame(t(as.matrix(results)))
}
if (param == "esr") {
y <- df$db.esr.ft
x <- df$s.esr.ft
fit <- summary(lm(y ~ 0 + x, data= df))
std_err <- fit$sigma
fit <- data.frame(fit$coefficients)
df_values <- data.frame(twoD = df$s.esr.ft,
threeD = df$db.esr.ft,
slope = rep(fit[1,1], len= nrow(df)))
delta <- nrow(df_values) * sum(df_values$twoD^2) - (sum(df_values$twoD))^2
sigma.y <- sqrt(1/(nrow(df_values)-2)*sum((df_values$threeD - 0 - df_values$twoD*df_values$slope)^2))
uncert.slope <- sigma.y * sqrt(nrow(df_values)/delta)
results <- rbind(slope=fit[1,1], sigma.slope=uncert.slope, intercept=0, sigma.intercept=0, std.error=std_err)
results <<- as.data.frame(t(as.matrix(results)))
}
}
slope.uncertainty(apatite, "ft")
View(results)
slope.uncertainty <- function(df, param) {
if (param == "ft") {
x <- df$db.ft
y <- df$s.ft
fit <- summary(lm(y ~ 0 + x, data= df))
std_err <- fit$sigma
fit <- data.frame(fit$coefficients)
df_values <- data.frame(twoD = df$s.ft,
threeD = df$db.ft,
slope = rep(fit[1,1], len= nrow(df)))
delta <- nrow(df_values) * sum(df_values$twoD^2) - (sum(df_values$twoD))^2
sigma.y <- sqrt(1/(nrow(df_values)-2)*sum((df_values$threeD - 0 - df_values$twoD*df_values$slope)^2))
uncert.slope <- sigma.y * sqrt(nrow(df_values)/delta)
results <- rbind(slope=fit[1,1], sigma.slope=uncert.slope, intercept=0, sigma.intercept=0, std.error=std_err)
results <<- as.data.frame(t(as.matrix(results)))
}
if (param == "volume") {
y <- df$db.v
x <- df$s.v
fit <- summary(lm(y ~ 0 + x, data= df))
std_err <- fit$sigma
fit <- data.frame(fit$coefficients)
df_values <- data.frame(twoD = df$s.v,
threeD = df$db.v,
slope = rep(fit[1,1], len= nrow(df)))
delta <- nrow(df_values) * sum(df_values$twoD^2) - (sum(df_values$twoD))^2
sigma.y <- sqrt(1/(nrow(df_values)-2)*sum((df_values$threeD - 0 - df_values$twoD*df_values$slope)^2))
uncert.slope <- sigma.y * sqrt(nrow(df_values)/delta)
results <- rbind(slope=fit[1,1], sigma.slope=uncert.slope, intercept=0, sigma.intercept=0, std.error=std_err)
results <<- as.data.frame(t(as.matrix(results)))
}
if (param == "esr") {
y <- df$db.esr.ft
x <- df$s.esr.ft
fit <- summary(lm(y ~ 0 + x, data= df))
std_err <- fit$sigma
fit <- data.frame(fit$coefficients)
df_values <- data.frame(twoD = df$s.esr.ft,
threeD = df$db.esr.ft,
slope = rep(fit[1,1], len= nrow(df)))
delta <- nrow(df_values) * sum(df_values$twoD^2) - (sum(df_values$twoD))^2
sigma.y <- sqrt(1/(nrow(df_values)-2)*sum((df_values$threeD - 0 - df_values$twoD*df_values$slope)^2))
uncert.slope <- sigma.y * sqrt(nrow(df_values)/delta)
results <- rbind(slope=fit[1,1], sigma.slope=uncert.slope, intercept=0, sigma.intercept=0, std.error=std_err)
results <<- as.data.frame(t(as.matrix(results)))
}
}
slope.uncertainty(apatite, "ft")
results.switched <- results
slope.uncertainty <- function(df, param) {
if (param == "ft") {
y <- df$db.ft
x <- df$s.ft
fit <- summary(lm(y ~ 0 + x, data= df))
std_err <- fit$sigma
fit <- data.frame(fit$coefficients)
df_values <- data.frame(twoD = df$s.ft,
threeD = df$db.ft,
slope = rep(fit[1,1], len= nrow(df)))
delta <- nrow(df_values) * sum(df_values$twoD^2) - (sum(df_values$twoD))^2
sigma.y <- sqrt(1/(nrow(df_values)-2)*sum((df_values$threeD - 0 - df_values$twoD*df_values$slope)^2))
uncert.slope <- sigma.y * sqrt(nrow(df_values)/delta)
results <- rbind(slope=fit[1,1], sigma.slope=uncert.slope, intercept=0, sigma.intercept=0, std.error=std_err)
results <<- as.data.frame(t(as.matrix(results)))
}
if (param == "volume") {
y <- df$db.v
x <- df$s.v
fit <- summary(lm(y ~ 0 + x, data= df))
std_err <- fit$sigma
fit <- data.frame(fit$coefficients)
df_values <- data.frame(twoD = df$s.v,
threeD = df$db.v,
slope = rep(fit[1,1], len= nrow(df)))
delta <- nrow(df_values) * sum(df_values$twoD^2) - (sum(df_values$twoD))^2
sigma.y <- sqrt(1/(nrow(df_values)-2)*sum((df_values$threeD - 0 - df_values$twoD*df_values$slope)^2))
uncert.slope <- sigma.y * sqrt(nrow(df_values)/delta)
results <- rbind(slope=fit[1,1], sigma.slope=uncert.slope, intercept=0, sigma.intercept=0, std.error=std_err)
results <<- as.data.frame(t(as.matrix(results)))
}
if (param == "esr") {
y <- df$db.esr.ft
x <- df$s.esr.ft
fit <- summary(lm(y ~ 0 + x, data= df))
std_err <- fit$sigma
fit <- data.frame(fit$coefficients)
df_values <- data.frame(twoD = df$s.esr.ft,
threeD = df$db.esr.ft,
slope = rep(fit[1,1], len= nrow(df)))
delta <- nrow(df_values) * sum(df_values$twoD^2) - (sum(df_values$twoD))^2
sigma.y <- sqrt(1/(nrow(df_values)-2)*sum((df_values$threeD - 0 - df_values$twoD*df_values$slope)^2))
uncert.slope <- sigma.y * sqrt(nrow(df_values)/delta)
results <- rbind(slope=fit[1,1], sigma.slope=uncert.slope, intercept=0, sigma.intercept=0, std.error=std_err)
results <<- as.data.frame(t(as.matrix(results)))
}
}
slope.uncertainty(apatite, "ft")
View(results.switched)
slope.uncertainty.switched(apatite, "ft")
View(results)
abline(0, 1.02)
abline(0, 1.02, col = "red")
fit1
fit2
bootstrap.linreg(apatite)
slope.uncertainty(b3, "ft")
View(results)
bootstrap.linreg(b3)
bootstrap.linreg(b2)
bootstrap.linreg(b1)
bootstrap.linreg(a)
bootstrap.linreg(gca)
slope.uncertainty <- function(df, param) {
if (param == "ft") {
x <- df$db.ft
y <- df$s.ft
fit <- summary(lm(y ~ 0 + x, data= df))
std_err <- fit$sigma
fit <- data.frame(fit$coefficients)
df_values <- data.frame(twoD = x,
threeD = y,
slope = rep(fit[1,1], len= nrow(df)))
delta <- nrow(df_values) * sum(df_values$twoD^2) - (sum(df_values$twoD))^2
sigma.y <- sqrt(1/(nrow(df_values)-2)*sum((df_values$threeD - 0 - df_values$twoD*df_values$slope)^2))
uncert.slope <- sigma.y * sqrt(nrow(df_values)/delta)
results <- rbind(slope=fit[1,1], sigma.slope=uncert.slope, intercept=0, sigma.intercept=0, std.error=std_err)
results <<- as.data.frame(t(as.matrix(results)))
}
if (param == "volume") {
y <- df$db.v
x <- df$s.v
fit <- summary(lm(y ~ 0 + x, data= df))
std_err <- fit$sigma
fit <- data.frame(fit$coefficients)
df_values <- data.frame(twoD = df$s.v,
threeD = df$db.v,
slope = rep(fit[1,1], len= nrow(df)))
delta <- nrow(df_values) * sum(df_values$twoD^2) - (sum(df_values$twoD))^2
sigma.y <- sqrt(1/(nrow(df_values)-2)*sum((df_values$threeD - 0 - df_values$twoD*df_values$slope)^2))
uncert.slope <- sigma.y * sqrt(nrow(df_values)/delta)
results <- rbind(slope=fit[1,1], sigma.slope=uncert.slope, intercept=0, sigma.intercept=0, std.error=std_err)
results <<- as.data.frame(t(as.matrix(results)))
}
if (param == "esr") {
y <- df$db.esr.ft
x <- df$s.esr.ft
fit <- summary(lm(y ~ 0 + x, data= df))
std_err <- fit$sigma
fit <- data.frame(fit$coefficients)
df_values <- data.frame(twoD = df$s.esr.ft,
threeD = df$db.esr.ft,
slope = rep(fit[1,1], len= nrow(df)))
delta <- nrow(df_values) * sum(df_values$twoD^2) - (sum(df_values$twoD))^2
sigma.y <- sqrt(1/(nrow(df_values)-2)*sum((df_values$threeD - 0 - df_values$twoD*df_values$slope)^2))
uncert.slope <- sigma.y * sqrt(nrow(df_values)/delta)
results <- rbind(slope=fit[1,1], sigma.slope=uncert.slope, intercept=0, sigma.intercept=0, std.error=std_err)
results <<- as.data.frame(t(as.matrix(results)))
}
}
slope.uncertainty.switched(apatite, "ft")
View(results)
slope.uncertainty.switched(a1, "ft")
View(results)
slope.uncertainty(a1, "ft")
View(results)
slope.uncertainty <- function(df, param) {
if (param == "ft") {
y <- df$db.ft
x <- df$s.ft
fit <- summary(lm(y ~ 0 + x, data= df))
std_err <- fit$sigma
fit <- data.frame(fit$coefficients)
df_values <- data.frame(twoD = df$s.ft,
threeD = df$db.ft,
slope = rep(fit[1,1], len= nrow(df)))
delta <- nrow(df_values) * sum(df_values$twoD^2) - (sum(df_values$twoD))^2
sigma.y <- sqrt(1/(nrow(df_values)-2)*sum((df_values$threeD - 0 - df_values$twoD*df_values$slope)^2))
uncert.slope <- sigma.y * sqrt(nrow(df_values)/delta)
results <- rbind(slope=fit[1,1], sigma.slope=uncert.slope, intercept=0, sigma.intercept=0, std.error=std_err)
results <<- as.data.frame(t(as.matrix(results)))
}
if (param == "volume") {
y <- df$db.v
x <- df$s.v
fit <- summary(lm(y ~ 0 + x, data= df))
std_err <- fit$sigma
fit <- data.frame(fit$coefficients)
df_values <- data.frame(twoD = df$s.v,
threeD = df$db.v,
slope = rep(fit[1,1], len= nrow(df)))
delta <- nrow(df_values) * sum(df_values$twoD^2) - (sum(df_values$twoD))^2
sigma.y <- sqrt(1/(nrow(df_values)-2)*sum((df_values$threeD - 0 - df_values$twoD*df_values$slope)^2))
uncert.slope <- sigma.y * sqrt(nrow(df_values)/delta)
results <- rbind(slope=fit[1,1], sigma.slope=uncert.slope, intercept=0, sigma.intercept=0, std.error=std_err)
results <<- as.data.frame(t(as.matrix(results)))
}
if (param == "esr") {
y <- df$db.esr.ft
x <- df$s.esr.ft
fit <- summary(lm(y ~ 0 + x, data= df))
std_err <- fit$sigma
fit <- data.frame(fit$coefficients)
df_values <- data.frame(twoD = df$s.esr.ft,
threeD = df$db.esr.ft,
slope = rep(fit[1,1], len= nrow(df)))
delta <- nrow(df_values) * sum(df_values$twoD^2) - (sum(df_values$twoD))^2
sigma.y <- sqrt(1/(nrow(df_values)-2)*sum((df_values$threeD - 0 - df_values$twoD*df_values$slope)^2))
uncert.slope <- sigma.y * sqrt(nrow(df_values)/delta)
results <- rbind(slope=fit[1,1], sigma.slope=uncert.slope, intercept=0, sigma.intercept=0, std.error=std_err)
results <<- as.data.frame(t(as.matrix(results)))
}
}
slope.uncertainty(a1, "ft")
View(results)
bootstrap.linreg(a1)
bootstrap.linreg <- function(df) {
#Bootstrapping 2d and 3d values of my parameter
twoD <- df$s.ft
threeD <- df$db.ft
boots_2d <- lapply(1:261, function(i) sample(twoD, replace=TRUE))
boots_3d <- lapply(1:261, function(i) sample(threeD, replace=TRUE))
#Get data into a dataframe
boots_2d <- as.data.frame(do.call(cbind, boots_2d))
boots_3d <- as.data.frame(do.call(cbind, boots_3d))
boots_2d <<- boots_2d #a dataframe with nrow= df and ncol=500
boots_3d <<- boots_3d #a dataframe with nrow= df and ncol=500
slope <- list()  #initalize vector to store slopes
#use the 261 samples inside the linear regression and produce a list of slopes of length 261
for (i in 1:261) {
linreg <- summary(lm(boots_2d[,i] ~ 0 + boots_3d[,i]))
slope[i] <- linreg$coefficients[1]
}
#do summary statistics
slope <- unlist(slope)
results <<- as.data.frame(cbind(mean(slope), sd(slope))) %>%
rename(slope = V1, sd_slope = V2)
return(results)
}
bootstrap.linreg(a1)
bootstrap.linreg(a2)
bootstrap.linreg(hca)
bootstrap.linreg(gca)
plot(a1$s.ft, a1$db.ft)
abline(0, 1.015626)
bootstrap.linreg <- function(df) {
#Bootstrapping 2d and 3d values of my parameter
twoD <- df$s.ft
threeD <- df$db.ft
boots_2d <- lapply(1:261, function(i) sample(twoD, replace=TRUE))
boots_3d <- lapply(1:261, function(i) sample(threeD, replace=TRUE))
#Get data into a dataframe
boots_2d <- as.data.frame(do.call(cbind, boots_2d))
boots_3d <- as.data.frame(do.call(cbind, boots_3d))
boots_2d <<- boots_2d #a dataframe with nrow= df and ncol=500
boots_3d <<- boots_3d #a dataframe with nrow= df and ncol=500
slope <- list()  #initalize vector to store slopes
#use the 261 samples inside the linear regression and produce a list of slopes of length 261
for (i in 1:261) {
linreg <- summary(lm(boots_3d[,i] ~ 0 + boots_2d[,i]))
slope[i] <- linreg$coefficients[1]
}
#do summary statistics
slope <- unlist(slope)
results <<- as.data.frame(cbind(mean(slope), sd(slope))) %>%
rename(slope = V1, sd_slope = V2)
return(results)
}
bootstrap.linreg(a1)
abline(0, .9672268, col="red")
fit1 <- summary(lm(db.ft ~ s.ft, data= a1))
fit2 <- summary(lm(s.ft ~ db.ft, data= a1))
fit1
fit2
bootstrap.linreg(apatite)
bootstrap.linreg <- function(df) {
#Bootstrapping 2d and 3d values of my parameter
twoD <- df$s.ft
threeD <- df$db.ft
boots_2d <- lapply(1:261, function(i) sample(twoD, replace=TRUE))
boots_3d <- lapply(1:261, function(i) sample(threeD, replace=TRUE))
#Get data into a dataframe
boots_2d <- as.data.frame(do.call(cbind, boots_2d))
boots_3d <- as.data.frame(do.call(cbind, boots_3d))
boots_2d <<- boots_2d #a dataframe with nrow= df and ncol=500
boots_3d <<- boots_3d #a dataframe with nrow= df and ncol=500
slope <- list()  #initalize vector to store slopes
#use the 261 samples inside the linear regression and produce a list of slopes of length 261
for (i in 1:261) {
linreg <- summary(lm(boots_2d[,i] ~ 0 + boots_3d[,i]))
slope[i] <- linreg$coefficients[1]
}
#do summary statistics
slope <- unlist(slope)
results <<- as.data.frame(cbind(mean(slope), sd(slope))) %>%
rename(slope = V1, sd_slope = V2)
return(results)
}
bootstrap.linreg(apatite)
plot(apatite$s.ft, apatite$db.ft)
abline(0, .9541874, col = "red")
abline(0, 1.0111, col = "blue")
