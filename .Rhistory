residuals <- actual - (predicted) + 0
percent.diff <- (residuals / actual) * 100
df <- cbind(percent.diff, df)
p <- ggplot(df, aes(j.w1, percent.diff, color = glue({color}))) +
labs(x = "Maximum Width (µm)", y = "Residuals as a % Difference", title = paste(glue("{parameter}"), "residuals for", glue("{group}"), "grains", sep = " "))
assign(paste("uncertainty", glue("{parameter}"), glue("{group}"), sep = "_"), sd(percent.diff))
return(p)
}
residual.uncertainty("ft", "ellipsoid", ellip, "ri")
residual.uncertainty <- function (parameter, group, df, color) {
if (parameter == "ft") {
slope <- results_boot_ft %>% filter(grouping == group) %>% select(slope) %>% as.numeric()
df <- df %>%
select(sample, gem, gc, ri, np, size.cat, j.w1, db.ft, db.v, db.esr.ft) %>%
cbind(rep(slope,nrow(df))) %>%
rename(slope = `rep(slope,nrow(df))`)
actual <<- df$db.ft
predicted <<- df$slope * actual
}
residuals <- actual - (predicted) + 0
percent.diff <- (residuals / actual) * 100
df <- cbind(percent.diff, df)
p <- ggplot(df, aes(j.w1, percent.diff, color = glue({color}))) +
labs(x = "Maximum Width (µm)", y = "Residuals as a % Difference", title = paste(glue("{parameter}"), "residuals for", glue("{group}"), "grains", sep = " "))
assign(paste("uncertainty", glue("{parameter}"), glue("{group}"), sep = "_"), sd(percent.diff))
return(p)
}
residual.uncertainty("ft", "ellipsoid", ellip, "ri")
residual.uncertainty <- function (parameter, group, df, color) {
if (parameter == "ft") {
slope <- results_boot_ft %>% filter(grouping == group) %>% select(slope) %>% as.numeric()
df <- df %>%
select(sample, gem, gc, ri, np, size.cat, j.w1, db.ft, db.v, db.esr.ft) %>%
bind_cols(rep(slope,nrow(df)))
actual <<- df$db.ft
predicted <<- df$slope * actual
}
residuals <- actual - (predicted) + 0
percent.diff <- (residuals / actual) * 100
df <- cbind(percent.diff, df)
p <- ggplot(df, aes(j.w1, percent.diff, color = glue({color}))) +
labs(x = "Maximum Width (µm)", y = "Residuals as a % Difference", title = paste(glue("{parameter}"), "residuals for", glue("{group}"), "grains", sep = " "))
assign(paste("uncertainty", glue("{parameter}"), glue("{group}"), sep = "_"), sd(percent.diff))
return(p)
}
residual.uncertainty("ft", "ellipsoid", ellip, "ri")
View(df)
residual.uncertainty <- function (parameter, group, df, color) {
if (parameter == "ft") {
slope <- results_boot_ft %>% filter(grouping == group) %>% select(slope) %>% as.numeric()
df <- df %>%
select(sample, gem, gc, ri, np, size.cat, j.w1, db.ft, db.v, db.esr.ft) %>%
bind_cols(rep(slope,nrow(df)), .name_repair = "unique")
actual <<- df$db.ft
predicted <<- df$slope * actual
}
residuals <- actual - (predicted) + 0
percent.diff <- (residuals / actual) * 100
df <- cbind(percent.diff, df)
p <- ggplot(df, aes(j.w1, percent.diff, color = glue({color}))) +
labs(x = "Maximum Width (µm)", y = "Residuals as a % Difference", title = paste(glue("{parameter}"), "residuals for", glue("{group}"), "grains", sep = " "))
assign(paste("uncertainty", glue("{parameter}"), glue("{group}"), sep = "_"), sd(percent.diff))
return(p)
}
residual.uncertainty("ft", "ellipsoid", ellip, "ri")
residual.uncertainty <- function (parameter, group, df, color) {
if (parameter == "ft") {
slope <- results_boot_ft %>% filter(grouping == group) %>% select(slope) %>% as.numeric() %>% rep(slope, nrow(df))
df <- df %>%
select(sample, gem, gc, ri, np, size.cat, j.w1, db.ft, db.v, db.esr.ft) #%>%
#bind_cols(rep(slope,nrow(df)), .name_repair = "unique")
actual <<- df$db.ft
predicted <<- df$slope * actual
}
residuals <- actual - (predicted) + 0
percent.diff <- (residuals / actual) * 100
df <- cbind(percent.diff, df)
p <- ggplot(df, aes(j.w1, percent.diff, color = glue({color}))) +
labs(x = "Maximum Width (µm)", y = "Residuals as a % Difference", title = paste(glue("{parameter}"), "residuals for", glue("{group}"), "grains", sep = " "))
assign(paste("uncertainty", glue("{parameter}"), glue("{group}"), sep = "_"), sd(percent.diff))
return(p)
}
residual.uncertainty("ft", "ellipsoid", ellip, "ri")
residual.uncertainty <- function (parameter, group, df, color) {
if (parameter == "ft") {
slope <- results_boot_ft %>% filter(grouping == group) %>% select(slope) %>% as.numeric()
df <- df %>%
select(sample, gem, gc, ri, np, size.cat, j.w1, db.ft, db.v, db.esr.ft) #%>%
#bind_cols(rep(slope,nrow(df)), .name_repair = "unique")
actual <<- df$db.ft
predicted <<- df$slope * actual
}
residuals <- actual - (predicted) + 0
percent.diff <- (residuals / actual) * 100
df <- cbind(percent.diff, df)
p <- ggplot(df, aes(j.w1, percent.diff, color = glue({color}))) +
labs(x = "Maximum Width (µm)", y = "Residuals as a % Difference", title = paste(glue("{parameter}"), "residuals for", glue("{group}"), "grains", sep = " "))
assign(paste("uncertainty", glue("{parameter}"), glue("{group}"), sep = "_"), sd(percent.diff))
return(p)
}
residual.uncertainty("ft", "ellipsoid", ellip, "ri")
View(df)
residual.uncertainty <- function (parameter, group, data, color) {
if (parameter == "ft") {
slope <- results_boot_ft %>% filter(grouping == group) %>% select(slope) %>% as.numeric()
df <- data %>%
select(sample, gem, gc, ri, np, size.cat, j.w1, db.ft, db.v, db.esr.ft) #%>%
#bind_cols(rep(slope,nrow(df)), .name_repair = "unique")
actual <<- df$db.ft
predicted <<- df$slope * actual
}
residuals <- actual - (predicted) + 0
percent.diff <- (residuals / actual) * 100
df <- cbind(percent.diff, df)
p <- ggplot(df, aes(j.w1, percent.diff, color = glue({color}))) +
labs(x = "Maximum Width (µm)", y = "Residuals as a % Difference", title = paste(glue("{parameter}"), "residuals for", glue("{group}"), "grains", sep = " "))
assign(paste("uncertainty", glue("{parameter}"), glue("{group}"), sep = "_"), sd(percent.diff))
return(p)
}
residual.uncertainty("ft", "ellipsoid", ellip, "ri")
residual.uncertainty <- function (parameter, group, data, color) {
if (parameter == "ft") {
slope <- results_boot_ft %>% filter(grouping == group) %>% select(slope) %>% as.numeric()
df <- data %>%
select(sample, gem, gc, ri, np, size.cat, j.w1, db.ft, db.v, db.esr.ft) %>%
cbind(slope)
actual <<- df$db.ft
predicted <<- df$slope * actual
}
residuals <- actual - (predicted) + 0
percent.diff <- (residuals / actual) * 100
df <- cbind(percent.diff, df)
p <- ggplot(df, aes(j.w1, percent.diff, color = glue({color}))) +
labs(x = "Maximum Width (µm)", y = "Residuals as a % Difference", title = paste(glue("{parameter}"), "residuals for", glue("{group}"), "grains", sep = " "))
assign(paste("uncertainty", glue("{parameter}"), glue("{group}"), sep = "_"), sd(percent.diff))
return(p)
}
residual.uncertainty("ft", "ellipsoid", ellip, "ri")
residual.uncertainty <- function (parameter, group, data, color) {
if (parameter == "ft") {
slope <- results_boot_ft %>% filter(grouping == group) %>% select(slope) %>% as.numeric()
df <- data %>%
select(sample, gem, gc, ri, np, size.cat, j.w1, db.ft, db.v, db.esr.ft) %>%
cbind(slope)
actual <- df$db.ft
predicted <- df$slope * actual
}
residuals <- actual - (predicted) + 0
percent.diff <- (residuals / actual) * 100
df <<- cbind(percent.diff, df)
p <- ggplot(df, aes(j.w1, percent.diff, color = glue({color}))) +
labs(x = "Maximum Width (µm)", y = "Residuals as a % Difference", title = paste(glue("{parameter}"), "residuals for", glue("{group}"), "grains", sep = " "))
assign(paste("uncertainty", glue("{parameter}"), glue("{group}"), sep = "_"), sd(percent.diff))
return(p)
}
residual.uncertainty("ft", "ellipsoid", ellip, "ri")
View(df)
residual.uncertainty <- function (parameter, group, data, color) {
if (parameter == "ft") {
slope <- results_boot_ft %>% filter(grouping == group) %>% select(slope) %>% as.numeric()
df <- data %>%
select(sample, gem, gc, ri, np, size.cat, j.w1, db.ft, db.v, db.esr.ft) %>%
cbind(slope)
actual <- df$db.ft
predicted <- df$slope * actual
}
residuals <<- actual - (predicted) + 0
percent.diff <- (residuals / actual) * 100
df <<- cbind(percent.diff, df)
p <- ggplot(df, aes(j.w1, percent.diff, color = glue({color}))) +
labs(x = "Maximum Width (µm)", y = "Residuals as a % Difference", title = paste(glue("{parameter}"), "residuals for", glue("{group}"), "grains", sep = " "))
assign(paste("uncertainty", glue("{parameter}"), glue("{group}"), sep = "_"), sd(percent.diff))
return(p)
}
residual.uncertainty("ft", "ellipsoid", ellip, "ri")
residual.uncertainty <- function (parameter, group, data, color) {
if (parameter == "ft") {
slope <- results_boot_ft %>% filter(grouping == group) %>% select(slope) %>% as.numeric()
df <- data %>%
select(sample, gem, gc, ri, np, size.cat, j.w1, db.ft, db.v, db.esr.ft) %>%
cbind(slope)
actual <- df$db.ft
predicted <- df$slope * actual
}
residuals <<- actual - predicted + 0
percent.diff <- (residuals / actual) * 100
df <<- cbind(percent.diff, df)
p <- ggplot(df, aes(j.w1, percent.diff, color = glue({color}))) +
labs(x = "Maximum Width (µm)", y = "Residuals as a % Difference", title = paste(glue("{parameter}"), "residuals for", glue("{group}"), "grains", sep = " "))
assign(paste("uncertainty", glue("{parameter}"), glue("{group}"), sep = "_"), sd(percent.diff))
return(p)
}
residual.uncertainty("ft", "ellipsoid", ellip, "ri")
residual.uncertainty <- function (parameter, group, data, color) {
if (parameter == "ft") {
slope <- results_boot_ft %>% filter(grouping == group) %>% select(slope) %>% as.numeric()
df <- data %>%
select(sample, gem, gc, ri, np, size.cat, j.w1, db.ft, db.v, db.esr.ft) %>%
cbind(slope)
actual <- df$db.ft
predicted <- df$slope * actual
}
residuals <- actual - predicted + 0
print(residuals)
percent.diff <- (residuals / actual) * 100
df <<- cbind(percent.diff, df)
p <- ggplot(df, aes(j.w1, percent.diff, color = glue({color}))) +
labs(x = "Maximum Width (µm)", y = "Residuals as a % Difference", title = paste(glue("{parameter}"), "residuals for", glue("{group}"), "grains", sep = " "))
assign(paste("uncertainty", glue("{parameter}"), glue("{group}"), sep = "_"), sd(percent.diff))
return(p)
}
residual.uncertainty("ft", "ellipsoid", ellip, "ri")
View(df)
residual.uncertainty <- function (parameter, group, data, color) {
if (parameter == "ft") {
slope <- results_boot_ft %>% filter(grouping == group) %>% select(slope) %>% as.numeric()
df <- data %>%
select(sample, gem, gc, ri, np, size.cat, j.w1, db.ft, db.v, db.esr.ft) %>%
cbind(slope)
actual <- df$db.ft
predicted <- df$slope * actual
}
residuals <- actual - predicted + 0
#print(residuals)
percent.diff <- (residuals / actual) * 100
print(percent.diff)
df <- cbind(percent.diff, df)
p <- ggplot(df, aes(j.w1, percent.diff, color = glue({color}))) +
labs(x = "Maximum Width (µm)", y = "Residuals as a % Difference", title = paste(glue("{parameter}"), "residuals for", glue("{group}"), "grains", sep = " "))
assign(paste("uncertainty", glue("{parameter}"), glue("{group}"), sep = "_"), sd(percent.diff))
return(p)
}
residual.uncertainty("ft", "ellipsoid", ellip, "ri")
residual.uncertainty <- function (parameter, group, data, color) {
if (parameter == "ft") {
slope <- results_boot_ft %>% filter(grouping == group) %>% select(slope) %>% as.numeric()
df <- data %>%
select(sample, gem, gc, ri, np, size.cat, j.w1, db.ft, db.v, db.esr.ft) %>%
cbind(slope)
actual <- df$db.ft
predicted <- df$slope * actual
residuals <- actual - predicted + 0
percent.diff <- (residuals / actual) * 100
df <- cbind(percent.diff, df)
p <- ggplot(df, aes(j.w1, percent.diff, color = glue({color}))) +
labs(x = "Maximum Width (µm)", y = "Residuals as a % Difference", title = paste(glue("{parameter}"), "residuals for", glue("{group}"), "grains", sep = " "))
assign(paste("uncertainty", glue("{parameter}"), glue("{group}"), sep = "_"), sd(percent.diff))
}
return(p)
}
residual.uncertainty("ft", "ellipsoid", ellip, "ri")
residual.uncertainty <- function (parameter, group, data, color) {
if (parameter == "ft") {
slope <- results_boot_ft %>% filter(grouping == group) %>% select(slope) %>% as.numeric()
df <- data %>%
select(sample, gem, gc, ri, np, size.cat, j.w1, db.ft, db.v, db.esr.ft) %>%
cbind(slope)
actual <- df$db.ft
predicted <- df$slope * actual
residuals <- actual - predicted + 0
percent.diff <- (residuals / actual) * 100
df <<- cbind(percent.diff, df)
}
p <- ggplot(df, aes(j.w1, percent.diff, color = glue({color}))) +
labs(x = "Maximum Width (µm)", y = "Residuals as a % Difference", title = paste(glue("{parameter}"), "residuals for", glue("{group}"), "grains", sep = " "))
assign(paste("uncertainty", glue("{parameter}"), glue("{group}"), sep = "_"), sd(percent.diff))
print(sd(percent.diff))
return(p)
}
residual.uncertainty("ft", "ellipsoid", ellip, "ri")
residual.uncertainty <- function (parameter, group, data, color) {
if (parameter == "ft") {
slope <- results_boot_ft %>% filter(grouping == group) %>% select(slope) %>% as.numeric()
df <- data %>%
select(sample, gem, gc, ri, np, size.cat, j.w1, db.ft, db.v, db.esr.ft) %>%
cbind(slope)
actual <- df$db.ft
predicted <- df$slope * actual
residuals <<- actual - predicted + 0
percent.diff <- (residuals / actual) * 100
df <<- cbind(percent.diff, df)
}
p <- ggplot(df, aes(j.w1, percent.diff, color = glue({color}))) +
labs(x = "Maximum Width (µm)", y = "Residuals as a % Difference", title = paste(glue("{parameter}"), "residuals for", glue("{group}"), "grains", sep = " "))
assign(paste("uncertainty", glue("{parameter}"), glue("{group}"), sep = "_"), sd(percent.diff))
print(sd(percent.diff))
return(p)
}
residual.uncertainty("ft", "ellipsoid", ellip, "ri")
residual.uncertainty <- function (parameter, group, data, color) {
if (parameter == "ft") {
slope <- results_boot_ft %>% filter(grouping == group) %>% select(slope) %>% as.numeric()
df <- data %>%
select(sample, gem, gc, ri, np, size.cat, j.w1, db.ft, db.v, db.esr.ft) %>%
cbind(slope)
actual <- df$db.ft
predicted <- df$slope * actual
resid_mine <<- actual - predicted + 0
percent.diff <- (resid_mine / actual) * 100
kms <- cbind(percent.diff, df)
}
p <- ggplot(kms, aes(j.w1, percent.diff, color = glue({color}))) +
labs(x = "Maximum Width (µm)", y = "Residuals as a % Difference", title = paste(glue("{parameter}"), "residuals for", glue("{group}"), "grains", sep = " "))
assign(paste("uncertainty", glue("{parameter}"), glue("{group}"), sep = "_"), sd(percent.diff))
print(sd(percent.diff))
return(p)
}
residual.uncertainty("ft", "ellipsoid", ellip, "ri")
residual.uncertainty <- function (parameter, group, data, color) {
if (parameter == "ft") {
slope <- results_boot_ft %>% filter(grouping == group) %>% select(slope) %>% as.numeric()
df <- data %>%
select(sample, gem, gc, ri, np, size.cat, j.w1, db.ft, db.v, db.esr.ft) %>%
cbind(slope)
actual <- df$db.ft
predicted <- df$slope * actual
resid_mine <<- actual - predicted + 0
percent.diff <<- (resid_mine / actual) * 100
kms <- cbind(percent.diff, df)
}
p <- ggplot(kms, aes(j.w1, percent.diff, color = glue({color}))) +
labs(x = "Maximum Width (µm)", y = "Residuals as a % Difference", title = paste(glue("{parameter}"), "residuals for", glue("{group}"), "grains", sep = " "))
assign(paste("uncertainty", glue("{parameter}"), glue("{group}"), sep = "_"), sd(percent.diff))
print(sd(percent.diff))
return(p)
}
residual.uncertainty("ft", "ellipsoid", ellip, "ri")
resid_mine/actual
residual.uncertainty <- function (parameter, group, data, color) {
if (parameter == "ft") {
slope <- results_boot_ft %>% filter(grouping == group) %>% select(slope) %>% as.numeric()
df <- data %>%
select(sample, gem, gc, ri, np, size.cat, j.w1, db.ft, db.v, db.esr.ft) %>%
cbind(slope)
actual <- df$db.ft
predicted <- df$slope * actual
resid_mine <<- actual - predicted + 0
percent.diff <<- (resid_mine / actual) * 100
kms <- cbind(percent.diff, df)
}
p <- ggplot(kms, aes(j.w1, percent.diff, color = glue({color}))) +
geom_point() +
labs(x = "Maximum Width (µm)", y = "Residuals as a % Difference", title = paste(glue("{parameter}"), "residuals for", glue("{group}"), "grains", sep = " "))
assign(paste("uncertainty", glue("{parameter}"), glue("{group}"), sep = "_"), sd(percent.diff))
print(sd(percent.diff))
return(p)
}
residual.uncertainty("ft", "ellipsoid", ellip, "ri")
ggplot(ellip, aes(s.ft, db.ft)) +
geom_point() +
geom_abline(slope = slope, intercept = 0)
resid_mine
actual
ggplot(ellip, aes(s.ft, db.ft)) +
geom_point() +
geom_point(ellip, mapping = aes(s.ft, predicted), color = "red") +
geom_abline(slope = slope, intercept = 0)
ggplot(ellip, aes(s.ft, db.ft)) +
geom_point() +
geom_point(ellip, mapping = aes(s.ft, predicted), color = "red") +
geom_abline(slope = 1/slope, intercept = 0)
ggplot(ellip, aes(s.ft, db.ft)) +
geom_point() +
geom_point(ellip, mapping = aes(s.ft, predicted), color = "red") +
geom_abline(slope = 1/slope, intercept = 0) +
geom_abline(1,0)
ggplot(ellip, aes(s.ft, db.ft)) +
geom_point() +
geom_point(ellip, mapping = aes(s.ft, predicted), color = "red") +
geom_abline(slope = 1/slope, intercept = 0) +
geom_abline(slope = 1, intercept = 0)
View(bootstrap.linreg)
View(bootstrap.linreg.nest)
bootstrap.linreg.nest <- function (x, param) {
# Set set.seed a starting number to generate a sequence of random numbers so that we can get reproducible results
set.seed(123)
#Perform bootstrap
sample_boot <- bootstraps(x,
times = 1000,
apparent = TRUE)
#Run linear regression on each bootstrap
if (param == "ft") {
sample_models <- sample_boot %>%
mutate(model = map(splits, ~ lm(s.ft ~ 0 + db.ft,
data = .)),
coef_inf = map(model, tidy))
}
if (param == "volume")  {
sample_models <- sample_boot %>%
mutate(model = map(splits, ~ lm(s.v ~ 0 + db.v,
data = .)),
coef_inf = map(model, tidy))
}
if (param == "esr") {
sample_models <- sample_boot %>%
mutate(model = map(splits, ~ lm(s.esr.ft ~ 0 + db.esr.ft,
data = .)),
coef_inf = map(model, tidy))
}
#Get coefficients
sample_coefs <- sample_models %>%
unnest(coef_inf)
#Get confidence interval
#percentile_intervals <- int_pctl(sample_models,coef_inf)
#GET RESIDUALS
residuals_og <- unname(sample_coefs[[3]][[1001]]$residuals)
#Store results
slope <-  mean(sample_coefs$estimate)
std.err <- mean(sample_coefs$std.error)
plot.slope <- 1/(mean(sample_coefs$estimate))
slopes_boot <- sample_coefs$estimate
results_boot <- as.data.frame(cbind(slope, std.err, plot.slope))
results_boot_list <- list(results_boot, slopes_boot, residuals_og)
return(results_boot_list)
#assign(paste(glue("{df_name}"), "slopes", glue("{param}"), sep = "_"), sample_coefs$estimate, envir = parent.frame())
#assign("boot_slopes", slopes_boot, envir = parent.frame())
}
sample_df <- apatite %>%
select(gem, gc, ri, np, geo, size.cat, db.ft, s.ft, db.v, s.v, s.esr.ft, db.esr.ft) %>%
pivot_longer(1:6, values_to = "grouping") %>%
group_by(name, grouping) %>%
nest()
# Use 'map' to apply function over a list of dataframes (ie. the nested df above).
param <-  "ft"
results_boot <- pmap(list(sample_df[[3]],
glue("{param}")),
bootstrap.linreg.nest)
View(results_boot)
# Convert the lists of lists spit out by 'map' into a dataframe that is pretty & in the correct order.
# Seperate slopes from other results
results_flat <- flatten(results_boot)
results_boot <- results_flat[seq(1, length(results_flat), 2)]
slopes_boot <- results_flat[seq(2, length(results_flat), 2)]
residuals_og <- results_flat[seq(3, length(results_flat), 2)]
View(residuals_og)
?seq
# Convert the lists of lists spit out by 'map' into a dataframe that is pretty & in the correct order.
# Seperate slopes from other results
results_flat <- flatten(results_boot)
results_boot <- results_flat[seq(1, length(results_flat), 3)]
slopes_boot <- results_flat[seq(2, length(results_flat), 3)]
residuals_og <- results_flat[seq(3, length(results_flat), 3)]
View(residuals_og)
View(results_boot)
View(results_flat)
View(results_boot)
results_boot <- pmap(list(sample_df[[3]],
glue("{param}")),
bootstrap.linreg.nest)
View(results_boot)
# Convert the lists of lists spit out by 'map' into a dataframe that is pretty & in the correct order.
# Seperate slopes from other results
results_flat <- flatten(results_boot)
View(results_flat)
results_boot <- results_flat[seq(1, length(results_flat), 3)]
View(results_boot)
slopes_boot <- results_flat[seq(2, length(results_flat), 3)]
View(slopes_boot)
residuals_og <- results_flat[seq(3, length(results_flat), 3)]
View(residuals_og)
View(sample_df)
lmobject <- lm(s.ft ~ 0 + db.ft, a)
residuals(lmobject)
residuals_og[[8]]
residual.uncertainty("ft", "A", a, "ri")
?residuals
View(residuals_og)
version
bootstrap.linreg.nest <- function (x, param) {
# Set set.seed a starting number to generate a sequence of random numbers so that we can get reproducible results
set.seed(123)
#Perform bootstrap
sample_boot <- bootstraps(x,
times = 1000,
apparent = TRUE)
#Run linear regression on each bootstrap
if (param == "ft") {
sample_models <- sample_boot %>%
mutate(model = map(splits, ~ lm(s.ft ~ 0 + db.ft,
data = .)),
coef_inf = map(model, tidy))
}
if (param == "volume")  {
sample_models <- sample_boot %>%
mutate(model = map(splits, ~ lm(s.v ~ 0 + db.v,
data = .)),
coef_inf = map(model, tidy))
}
if (param == "esr") {
sample_models <- sample_boot %>%
mutate(model = map(splits, ~ lm(s.esr.ft ~ 0 + db.esr.ft,
data = .)),
coef_inf = map(model, tidy))
}
#Get coefficients
sample_coefs <- sample_models %>%
unnest(coef_inf)
#Get confidence interval
#percentile_intervals <- int_pctl(sample_models,coef_inf)
#GET RESIDUALS
residuals_og <- unname(sample_coefs[[3]][[1001]]$residuals)
#Store results
slope <-  mean(sample_coefs$estimate)
std.err <- mean(sample_coefs$std.error)
plot.slope <- 1/(mean(sample_coefs$estimate))
slopes_boot <- sample_coefs$estimate
results_boot <- as.data.frame(cbind(slope, std.err, plot.slope))
results_boot_list <- list(results_boot, slopes_boot, residuals_og)
return(results_boot_list)
#assign(paste(glue("{df_name}"), "slopes", glue("{param}"), sep = "_"), sample_coefs$estimate, envir = parent.frame())
#assign("boot_slopes", slopes_boot, envir = parent.frame())
}
