}
p <- ggplot(sample_df, aes(j.w1, percent.diff)) +
geom_hline(mapping=aes(yintercept = 0)) +
geom_point() +
labs(x = "Maximum Width (µm)", y = "Residuals as a % Difference", title = paste(glue("{parameter}"), "residuals for", glue("{group}"), "grains", sep = " "))
assign(paste("uncertainty", glue("{parameter}"), glue("{group}"), sep = "_"), (sd(percent.diff)), envir = parent.frame())
sd_percent.diff <- sd(percent.diff)
ri_summary <- sample_df %>%
select(sample, ri, size.cat, gc, gem, np, percent.diff) %>%
group_by(ri) %>%
summarise(sd_residuals = sd_percent.diff)
size_summary <- sample_df %>%
select(sample, ri, size.cat, gc, gem, np, percent.diff) %>%
group_by(size.cat) %>%
summarise(sd_residuals = sd_percent.diff)
print(ri_summary)
print(size_summary)
print(tibble(sd_percent.diff))
return(p)
}
residual.uncertainty(hex, "ft", "hexagonal")
residual.uncertainty <- function (parameter_df, parameter, group) {
#parameter_df --> a, b, c, ri1, ellip, etc.
#parameter --> "ft", "volume", "esr"
#group --> "hexagonal", "term1", etc. (ie. the name of the grouping from the results_boot sheet)
#color --> color the points in the output plot by something ie. size.cat, ri, etc.
sample_df <- parameter_df %>%
select(sample, gem, gc, ri, np, size.cat, j.w1, s.ft, db.ft, s.v, db.v, db.esr.ft, s.esr.ft)
if (parameter == "ft") {
#slope <- results_boot_ft %>% filter(grouping == group) %>% select(slope) %>% as.numeric()
slope <- 1.02520404616969
sample_df <- cbind(sample_df, slope)
actual <- sample_df$s.ft
yhat <- sample_df$slope * sample_df$db.ft
resid <- actual - yhat
percent.diff <- (resid / actual) * 100
sample_df <- cbind(percent.diff, sample_df)
}
if (parameter == "volume") {
slope <- results_boot_volume %>% filter(grouping == group) %>% select(slope) %>% as.numeric()
sample_df <- cbind(sample_df, slope)
actual <- sample_df$s.v
yhat <- sample_df$slope * sample_df$db.v
resid <- actual - yhat
percent.diff <- (resid / actual) * 100
sample_df <- cbind(percent.diff, sample_df)
}
if (parameter == "esr") {
slope <- results_boot_esr %>% filter(grouping == group) %>% select(slope) %>% as.numeric()
sample_df <- cbind(sample_df, slope)
actual <- sample_df$s.esr.ft
yhat <- sample_df$slope * sample_df$db.esr.ft
resid <- actual - yhat
percent.diff <- (resid / actual) * 100
sample_df <- cbind(percent.diff, sample_df)
}
p <- ggplot(sample_df, aes(j.w1, percent.diff)) +
geom_hline(mapping=aes(yintercept = 0)) +
geom_point() +
labs(x = "Maximum Width (µm)", y = "Residuals as a % Difference", title = paste(glue("{parameter}"), "residuals for", glue("{group}"), "grains", sep = " "))
assign(paste("uncertainty", glue("{parameter}"), glue("{group}"), sep = "_"), (sd(percent.diff)), envir = parent.frame())
ri_summary <- sample_df %>%
select(sample, ri, size.cat, gc, gem, np, percent.diff) %>%
group_by(ri) %>%
summarise(sd_residuals = sd(percent.diff))
size_summary <- sample_df %>%
select(sample, ri, size.cat, gc, gem, np, percent.diff) %>%
group_by(size.cat) %>%
summarise(sd_residuals = sd(percent.diff))
print(ri_summary)
print(size_summary)
print(tibble(sd(percent.diff)))
return(p)
}
residual.uncertainty(hex, "ft", "hexagonal")
residual.uncertainty <- function (parameter_df, parameter, group) {
#parameter_df --> a, b, c, ri1, ellip, etc.
#parameter --> "ft", "volume", "esr"
#group --> "hexagonal", "term1", etc. (ie. the name of the grouping from the results_boot sheet)
#color --> color the points in the output plot by something ie. size.cat, ri, etc.
sample_df <- parameter_df %>%
select(sample, gem, gc, ri, np, size.cat, j.w1, s.ft, db.ft, s.v, db.v, db.esr.ft, s.esr.ft)
if (parameter == "ft") {
#slope <- results_boot_ft %>% filter(grouping == group) %>% select(slope) %>% as.numeric()
slope <- 1.02520404616969
sample_df <- cbind(sample_df, slope)
actual <- sample_df$s.ft
yhat <- sample_df$slope * sample_df$db.ft
resid <- actual - yhat
percent.diff <- (resid / actual) * 100
sample_df <- cbind(percent.diff, sample_df)
}
if (parameter == "volume") {
#slope <- results_boot_volume %>% filter(grouping == group) %>% select(slope) %>% as.numeric()
slope <- 1.292441972
sample_df <- cbind(sample_df, slope)
actual <- sample_df$s.v
yhat <- sample_df$slope * sample_df$db.v
resid <- actual - yhat
percent.diff <- (resid / actual) * 100
sample_df <- cbind(percent.diff, sample_df)
}
if (parameter == "esr") {
slope <- results_boot_esr %>% filter(grouping == group) %>% select(slope) %>% as.numeric()
sample_df <- cbind(sample_df, slope)
actual <- sample_df$s.esr.ft
yhat <- sample_df$slope * sample_df$db.esr.ft
resid <- actual - yhat
percent.diff <- (resid / actual) * 100
sample_df <- cbind(percent.diff, sample_df)
}
p <- ggplot(sample_df, aes(j.w1, percent.diff)) +
geom_hline(mapping=aes(yintercept = 0)) +
geom_point() +
labs(x = "Maximum Width (µm)", y = "Residuals as a % Difference", title = paste(glue("{parameter}"), "residuals for", glue("{group}"), "grains", sep = " "))
assign(paste("uncertainty", glue("{parameter}"), glue("{group}"), sep = "_"), (sd(percent.diff)), envir = parent.frame())
ri_summary <- sample_df %>%
select(sample, ri, size.cat, gc, gem, np, percent.diff) %>%
group_by(ri) %>%
summarise(sd_residuals = sd(percent.diff))
size_summary <- sample_df %>%
select(sample, ri, size.cat, gc, gem, np, percent.diff) %>%
group_by(size.cat) %>%
summarise(sd_residuals = sd(percent.diff))
print(ri_summary)
print(size_summary)
print(tibble(sd(percent.diff)))
return(p)
}
residual.uncertainty(hex, "volume", "hexagonal")
residual.uncertainty <- function (parameter_df, parameter, group) {
#parameter_df --> a, b, c, ri1, ellip, etc.
#parameter --> "ft", "volume", "esr"
#group --> "hexagonal", "term1", etc. (ie. the name of the grouping from the results_boot sheet)
#color --> color the points in the output plot by something ie. size.cat, ri, etc.
sample_df <- parameter_df %>%
select(sample, gem, gc, ri, np, size.cat, j.w1, s.ft, db.ft, s.v, db.v, db.esr.ft, s.esr.ft)
if (parameter == "ft") {
#slope <- results_boot_ft %>% filter(grouping == group) %>% select(slope) %>% as.numeric()
slope <- 1.02520404616969
sample_df <- cbind(sample_df, slope)
actual <- sample_df$s.ft
yhat <- sample_df$slope * sample_df$db.ft
resid <- actual - yhat
percent.diff <- (resid / actual) * 100
sample_df <- cbind(percent.diff, sample_df)
}
if (parameter == "volume") {
#slope <- results_boot_volume %>% filter(grouping == group) %>% select(slope) %>% as.numeric()
slope <- 1.292441972
sample_df <- cbind(sample_df, slope)
actual <- sample_df$s.v
yhat <- sample_df$slope * sample_df$db.v
resid <- actual - yhat
percent.diff <- (resid / actual) * 100
sample_df <- cbind(percent.diff, sample_df)
}
if (parameter == "esr") {
slope <- results_boot_esr %>% filter(grouping == group) %>% select(slope) %>% as.numeric()
sample_df <- cbind(sample_df, slope)
actual <- sample_df$s.esr.ft
yhat <- sample_df$slope * sample_df$db.esr.ft
resid <- actual - yhat
percent.diff <- (resid / actual) * 100
sample_df <- cbind(percent.diff, sample_df)
}
p <- ggplot(sample_df, aes(j.w1, percent.diff, color = ri)) +
geom_hline(mapping=aes(yintercept = 0)) +
geom_point() +
labs(x = "Maximum Width (µm)", y = "Residuals as a % Difference", title = paste(glue("{parameter}"), "residuals for", glue("{group}"), "grains", sep = " "))
assign(paste("uncertainty", glue("{parameter}"), glue("{group}"), sep = "_"), (sd(percent.diff)), envir = parent.frame())
ri_summary <- sample_df %>%
select(sample, ri, size.cat, gc, gem, np, percent.diff) %>%
group_by(ri) %>%
summarise(sd_residuals = sd(percent.diff))
size_summary <- sample_df %>%
select(sample, ri, size.cat, gc, gem, np, percent.diff) %>%
group_by(size.cat) %>%
summarise(sd_residuals = sd(percent.diff))
print(ri_summary)
print(size_summary)
print(tibble(sd(percent.diff)))
return(p)
}
residual.uncertainty(hex, "volume", "hexagonal")
residual.uncertainty <- function (parameter_df, parameter, group) {
#parameter_df --> a, b, c, ri1, ellip, etc.
#parameter --> "ft", "volume", "esr"
#group --> "hexagonal", "term1", etc. (ie. the name of the grouping from the results_boot sheet)
#color --> color the points in the output plot by something ie. size.cat, ri, etc.
sample_df <- parameter_df %>%
select(sample, gem, gc, ri, np, size.cat, j.w1, s.ft, db.ft, s.v, db.v, db.esr.ft, s.esr.ft)
if (parameter == "ft") {
#slope <- results_boot_ft %>% filter(grouping == group) %>% select(slope) %>% as.numeric()
slope <- 1.02520404616969
sample_df <- cbind(sample_df, slope)
actual <- sample_df$s.ft
yhat <- sample_df$slope * sample_df$db.ft
resid <- actual - yhat
percent.diff <- (resid / actual) * 100
sample_df <- cbind(percent.diff, sample_df)
}
if (parameter == "volume") {
#slope <- results_boot_volume %>% filter(grouping == group) %>% select(slope) %>% as.numeric()
slope <- 1.292441972
sample_df <- cbind(sample_df, slope)
actual <- sample_df$s.v
yhat <- sample_df$slope * sample_df$db.v
resid <- actual - yhat
percent.diff <- (resid / actual) * 100
sample_df <- cbind(percent.diff, sample_df)
}
if (parameter == "esr") {
slope <- results_boot_esr %>% filter(grouping == group) %>% select(slope) %>% as.numeric()
sample_df <- cbind(sample_df, slope)
actual <- sample_df$s.esr.ft
yhat <- sample_df$slope * sample_df$db.esr.ft
resid <- actual - yhat
percent.diff <- (resid / actual) * 100
sample_df <- cbind(percent.diff, sample_df)
}
p <<- ggplot(sample_df, aes(j.w1, percent.diff, color = ri)) +
geom_hline(mapping=aes(yintercept = 0)) +
geom_point() +
labs(x = "Maximum Width (µm)", y = "Residuals as a % Difference", title = paste(glue("{parameter}"), "residuals for", glue("{group}"), "grains", sep = " "))
assign(paste("uncertainty", glue("{parameter}"), glue("{group}"), sep = "_"), (sd(percent.diff)), envir = parent.frame())
ri_summary <- sample_df %>%
select(sample, ri, size.cat, gc, gem, np, percent.diff) %>%
group_by(ri) %>%
summarise(sd_residuals = sd(percent.diff))
size_summary <- sample_df %>%
select(sample, ri, size.cat, gc, gem, np, percent.diff) %>%
group_by(size.cat) %>%
summarise(sd_residuals = sd(percent.diff))
print(ri_summary)
print(size_summary)
print(tibble(sd(percent.diff)))
return(p)
}
residual.uncertainty(hex, "volume", "hexagonal")
ggplotly(p)
residual.uncertainty <- function (parameter_df, parameter, group) {
#parameter_df --> a, b, c, ri1, ellip, etc.
#parameter --> "ft", "volume", "esr"
#group --> "hexagonal", "term1", etc. (ie. the name of the grouping from the results_boot sheet)
#color --> color the points in the output plot by something ie. size.cat, ri, etc.
sample_df <- parameter_df %>%
select(sample, gem, gc, ri, np, size.cat, j.w1, s.ft, db.ft, s.v, db.v, db.esr.ft, s.esr.ft)
if (parameter == "ft") {
#slope <- results_boot_ft %>% filter(grouping == group) %>% select(slope) %>% as.numeric()
slope <- 1.02520404616969
sample_df <- cbind(sample_df, slope)
actual <- sample_df$s.ft
yhat <- sample_df$slope * sample_df$db.ft
resid <- actual - yhat
percent.diff <- (resid / actual) * 100
sample_df <- cbind(percent.diff, sample_df)
}
if (parameter == "volume") {
#slope <- results_boot_volume %>% filter(grouping == group) %>% select(slope) %>% as.numeric()
slope <- 1.292441972
sample_df <- cbind(sample_df, slope)
actual <- sample_df$s.v
yhat <- sample_df$slope * sample_df$db.v
resid <- actual - yhat
percent.diff <- (resid / actual) * 100
sample_df <- cbind(percent.diff, sample_df)
}
if (parameter == "esr") {
slope <- results_boot_esr %>% filter(grouping == group) %>% select(slope) %>% as.numeric()
sample_df <- cbind(sample_df, slope)
actual <- sample_df$s.esr.ft
yhat <- sample_df$slope * sample_df$db.esr.ft
resid <- actual - yhat
percent.diff <- (resid / actual) * 100
sample_df <- cbind(percent.diff, sample_df)
}
p <<- ggplot(sample_df, aes(j.w1, percent.diff, color = ri, key = sample)) +
geom_hline(mapping=aes(yintercept = 0)) +
geom_point() +
labs(x = "Maximum Width (µm)", y = "Residuals as a % Difference", title = paste(glue("{parameter}"), "residuals for", glue("{group}"), "grains", sep = " "))
assign(paste("uncertainty", glue("{parameter}"), glue("{group}"), sep = "_"), (sd(percent.diff)), envir = parent.frame())
ri_summary <- sample_df %>%
select(sample, ri, size.cat, gc, gem, np, percent.diff) %>%
group_by(ri) %>%
summarise(sd_residuals = sd(percent.diff))
size_summary <- sample_df %>%
select(sample, ri, size.cat, gc, gem, np, percent.diff) %>%
group_by(size.cat) %>%
summarise(sd_residuals = sd(percent.diff))
print(ri_summary)
print(size_summary)
print(tibble(sd(percent.diff)))
return(p)
}
residual.uncertainty(hex, "volume", "hexagonal")
ggplotly(p, tooltip = c("key"))
# Chunk 1: setup
#for stats
options(java.parameters = "-Xmx8000m") #to prevent Java heap space error. set to full RAM of this computer (8gB)
#https://stackoverflow.com/questions/21937640/handling-java-lang-outofmemoryerror-when-writing-to-excel-from-r
library(rJava)
library(MASS)
library(performance) #check model
library(tidymodels)
library(tictoc) #check how long model takes to run
#tidyverse
library(tidyverse) #purr, dplyr, tidyr, readr, readxl, tibble, stringr, forcats, ggplot2
library(broom)
library(scales)
library(readxl)
library(glue)
library(tibble)
#for viz
library(plotly)
library(patchwork)
library(RColorBrewer)
library(colorspace)
library(jcolors)
library(viridis)
library(ggsci)
library(ggthemes)
library(DescTools)
library(dichromat)
#for knitting
library(knitr)
library(tinytex)
library(latex2exp)
#library(xlsx)
#library(datapaste)
par(mfrow=c(1, 1)) #how to arrange plots, 1 per row, 1 per column
#Theme options
theme_set(theme_light())
theme_update(plot.title = element_text(hjust = 0.5)) #adjusts theme so that all titles are centered
theme_update(plot.subtitle= element_text(hjust = 0.5)) #adjusts subtitle so they are all centered
options(scipen = 10000000) #prints numbers instead of scientific notation
# Chunk 2
qual_color_random <- c("#322288", "#aa4499", "#44aa99", "#671000", "#989934", "#6599cc", "#aa4466", "#ddcc77", "#000000")
cb <- c("#595959", "#5f9ed1", "#c85200")
cb2 <- c("#f06400", "#949494", "#008CF0")
tf_color <- c("#ed6a5e", "#9ebc9e", "#553e4e")
# Chunk 3
apatite <- read_excel("./Data Comps_Final.xlsx", sheet="Data Comps")
as_tibble(apatite)
# Chunk 4
apatite$size.bin <- factor(apatite$size.bin, levels = c("40-50", "51-60", "61-70", "71-80", "81-90", "91-100", "101-110", "111-120", "121-130", "131-140", "141-150", "151-160", "161-170"))
apatite$gem <- factor(apatite$gem, levels = c("A1", "A2", "B1", "B2", "C1", "C2"))
apatite$gc <- factor(apatite$gc, levels = c("A", "B", "C"))
apatite$ri <- factor(apatite$ri, levels = c("1", "2"))
apatite$size.name <- factor(apatite$size.name, levels=c("Small & Rare","Small & Common","Typical & Common", "Large & Common", "Large & Rare"))
apatite$size.cat <- factor(apatite$size.cat, levels = c("rare- small", "common",  "rare- large"))
apatite$np <- factor(apatite$np, levels= c("term0", "term1", "term2"))
groupings <- as.vector(c("A", "A1", "A2", "B", "B1", "B2", "C", "C1", "C2", "hexagonal", "ellipsoid", "1", "2", "term0", "term1", "term2", "rare- small", "common", "rare- large"), mode = "character")
# Chunk 5
# #get vector of sheet names
# sheet_names <- excel_sheets("./Regression Results_Final.xlsx")
# #import all sheets into a list
# linreg_results <- lapply(sheet_names, function(x) read_excel(path = "./Regression Results_Final.xlsx", sheet = x))
# #export each element of list as a dataframe
# for (i in 1:20) {
#   assign(paste(sheet_names[[i]]), linreg_results[[i]])
# }
# Chunk 6
#Grains Removed
#common_apatite <- apatite %>%
#filter(!size.name == "Large & Rare", !size.name == "Small & Rare")
# Chunk 7
#Dataframe by Roughness Index
ri1 <- apatite %>% filter(ri=="1")
ri2 <- apatite %>% filter(ri=="2")
#Dataframe by Geometric Classification
a <- apatite %>% filter(gc=="A")
b <- apatite %>% filter(gc=="B")
c <- apatite %>% filter(gc=="C")
#Create Dataframes split by both geometry and roughness
a1 <- apatite %>% filter(gem == "A1")
a2 <- apatite %>% filter(gem == "A2")
b1 <- apatite %>% filter(gem == "B1")
b2 <- apatite %>% filter(gem == "B2")
c1 <- apatite %>% filter(gem == "C1")
c2 <- apatite %>% filter(gem == "C2")
#Make dataframes based on terminations
term0 <- apatite %>% filter(np == "term0")
term1 <- apatite %>% filter(np == "term1")
term2 <- apatite %>% filter(np == "term2")
#Make dataframes based on geometry
hex <- apatite %>% filter(geo == "hexagonal")
ellip <- apatite %>% filter(geo == "ellipsoid")
# Chunk 8
source("./Functions/function_error_propagation.R")
source("./Functions/function_bootstrapped_slopes.R")
#source("function_linreg_slope_uncertainty.R")
source("./Functions/function_model_diagnostics.R")
#source("function_ttest_compare.R")
source("./Functions/function_bootstrap_linreg_nested.R")
source("./Functions/function_taylor_uncertainties_nested.R")
source("./Functions/function_taylor_uncertainties_nested_notfixed.R")
source("./Functions/function_bootstrap_linreg_nested_notfixed.R")
source("./Functions/function_manual_pvalue.R")
source("./Functions/function_taylor_overlap.R")
# Chunk 9
#source("function_error_lines.R")
#source("function_plot_results.R")
residual.uncertainty <- function (parameter_df, parameter, group) {
#parameter_df --> a, b, c, ri1, ellip, etc.
#parameter --> "ft", "volume", "esr"
#group --> "hexagonal", "term1", etc. (ie. the name of the grouping from the results_boot sheet)
#color --> color the points in the output plot by something ie. size.cat, ri, etc.
sample_df <- parameter_df %>%
select(sample, gem, gc, ri, np, size.cat, j.w1, s.ft, db.ft, s.v, db.v, db.esr.ft, s.esr.ft)
if (parameter == "ft") {
#slope <- results_boot_ft %>% filter(grouping == group) %>% select(slope) %>% as.numeric()
slope <- 1.02520404616969
sample_df <- cbind(sample_df, slope)
actual <- sample_df$s.ft
yhat <- sample_df$slope * sample_df$db.ft
resid <- actual - yhat
percent.diff <- (resid / actual) * 100
sample_df <- cbind(percent.diff, sample_df)
}
if (parameter == "volume") {
#slope <- results_boot_volume %>% filter(grouping == group) %>% select(slope) %>% as.numeric()
slope <- 1.292441972
sample_df <- cbind(sample_df, slope)
actual <- sample_df$s.v
yhat <- sample_df$slope * sample_df$db.v
resid <- actual - yhat
percent.diff <- (resid / actual) * 100
sample_df <- cbind(percent.diff, sample_df)
}
if (parameter == "esr") {
slope <- results_boot_esr %>% filter(grouping == group) %>% select(slope) %>% as.numeric()
sample_df <- cbind(sample_df, slope)
actual <- sample_df$s.esr.ft
yhat <- sample_df$slope * sample_df$db.esr.ft
resid <- actual - yhat
percent.diff <- (resid / actual) * 100
sample_df <- cbind(percent.diff, sample_df)
}
p <- ggplot(sample_df, aes(j.w1, percent.diff, color = ri, key = sample)) +
geom_hline(mapping=aes(yintercept = 0)) +
geom_point() +
labs(x = "Maximum Width (µm)", y = "Residuals as a % Difference", title = paste(glue("{parameter}"), "residuals for", glue("{group}"), "grains", sep = " "))
assign(paste("uncertainty", glue("{parameter}"), glue("{group}"), sep = "_"), (sd(percent.diff)), envir = parent.frame())
ri_summary <- sample_df %>%
select(sample, ri, size.cat, gc, gem, np, percent.diff) %>%
group_by(ri) %>%
summarise(sd_residuals = sd(percent.diff))
size_summary <- sample_df %>%
select(sample, ri, size.cat, gc, gem, np, percent.diff) %>%
group_by(size.cat) %>%
summarise(sd_residuals = sd(percent.diff))
print(ri_summary)
print(size_summary)
print(tibble(sd(percent.diff)))
return(p)
}
residual.uncertainty(hex, "volume", "hexagonal")
residual.uncertainty <- function (parameter_df, parameter, group) {
#parameter_df --> a, b, c, ri1, ellip, etc.
#parameter --> "ft", "volume", "esr"
#group --> "hexagonal", "term1", etc. (ie. the name of the grouping from the results_boot sheet)
#color --> color the points in the output plot by something ie. size.cat, ri, etc.
sample_df <- parameter_df %>%
select(sample, gem, gc, ri, np, size.cat, j.w1, s.ft, db.ft, s.v, db.v, db.esr.ft, s.esr.ft)
if (parameter == "ft") {
#slope <- results_boot_ft %>% filter(grouping == group) %>% select(slope) %>% as.numeric()
slope <- 1.02520404616969
sample_df <- cbind(sample_df, slope)
actual <- sample_df$s.ft
yhat <- sample_df$slope * sample_df$db.ft
resid <- actual - yhat
percent.diff <- (resid / actual) * 100
sample_df <- cbind(percent.diff, sample_df)
}
if (parameter == "volume") {
#slope <- results_boot_volume %>% filter(grouping == group) %>% select(slope) %>% as.numeric()
slope <- 1.292441972
sample_df <- cbind(sample_df, slope)
actual <- sample_df$s.v
yhat <- sample_df$slope * sample_df$db.v
resid <- actual - yhat
percent.diff <- (resid / actual) * 100
sample_df <- cbind(percent.diff, sample_df)
}
if (parameter == "esr") {
slope <- results_boot_esr %>% filter(grouping == group) %>% select(slope) %>% as.numeric()
sample_df <- cbind(sample_df, slope)
actual <- sample_df$s.esr.ft
yhat <- sample_df$slope * sample_df$db.esr.ft
resid <- actual - yhat
percent.diff <- (resid / actual) * 100
sample_df <- cbind(percent.diff, sample_df)
}
p <- ggplot(sample_df, aes(j.w1, percent.diff, color = ri)) +
geom_hline(mapping=aes(yintercept = 0)) +
geom_point() +
labs(x = "Maximum Width (µm)", y = "Residuals as a % Difference", title = paste(glue("{parameter}"), "residuals for", glue("{group}"), "grains", sep = " "))
assign(paste("uncertainty", glue("{parameter}"), glue("{group}"), sep = "_"), (sd(percent.diff)), envir = parent.frame())
ri_summary <- sample_df %>%
select(sample, ri, size.cat, gc, gem, np, percent.diff) %>%
group_by(ri) %>%
summarise(sd_residuals = sd(percent.diff))
size_summary <- sample_df %>%
select(sample, ri, size.cat, gc, gem, np, percent.diff) %>%
group_by(size.cat) %>%
summarise(sd_residuals = sd(percent.diff))
print(ri_summary)
print(size_summary)
print(tibble(sd(percent.diff)))
return(p)
}
